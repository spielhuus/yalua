local assert = require("luassert")
local yalua = require("yalua")

local function load_file(file_path)
	local file = io.open(file_path, "r")
	if not file then
		return nil, "File not found"
	end
	local content = file:read("*all")
	file:close()
	return content
end

local function remove_trailing_spaces(str)
	return str:gsub("^%s+", "")
end

local function remove_all_trailing_spaces(multiline_str)
	-- local lines = {}
	-- for line in multiline_str:gmatch("[^\r\n]+") do
	-- 	local res = remove_trailing_spaces(line)
	-- 	table.insert(lines, res)
	-- end
	-- table.insert(lines, "")
	-- return table.concat(lines, "\n")
	return multiline_str
end

describe("Run the YAML test #suite, compare with TREE", function()
	it(
		"should parse the Sequence With Same Indentation as Parent Mapping, file: #AZ63 tags: #indent #mapping #sequence",
		function()
			print("### should parse the Sequence With Same Indentation as Parent Mapping, file: #AZ63")
			local input = load_file("./yaml-test-suite/data/AZ63/in.yaml")
			local tree = load_file("./yaml-test-suite/data/AZ63/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.10. Comment Lines, file: #8G76 tags: #spec #comment #empty #scalar #whitespace",
		function()
			print("### should parse the Spec Example 6.10. Comment Lines, file: #8G76")
			local input = load_file("./yaml-test-suite/data/8G76/in.yaml")
			local tree = load_file("./yaml-test-suite/data/8G76/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 6.14. “YAML” directive, file: #BEC7 tags: #spec #directive", function()
		print("### should parse the Spec Example 6.14. “YAML” directive, file: #BEC7")
		local input = load_file("./yaml-test-suite/data/BEC7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/BEC7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 9.4. Explicit Documents, file: #UT92 tags: #flow #spec #header #footer #comment",
		function()
			print("### should parse the Spec Example 9.4. Explicit Documents, file: #UT92")
			local input = load_file("./yaml-test-suite/data/UT92/in.yaml")
			local tree = load_file("./yaml-test-suite/data/UT92/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Extra words on %YAML directive, file: #H7TQ tags: #directive", function()
		print("### should parse the Extra words on %YAML directive, file: #H7TQ")
		local input = load_file("./yaml-test-suite/data/H7TQ/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 7.20. Single Pair Explicit Entry, file: #CT4Q tags: #explicit-key #spec #flow #mapping",
		function()
			print("### should parse the Spec Example 7.20. Single Pair Explicit Entry, file: #CT4Q")
			local input = load_file("./yaml-test-suite/data/CT4Q/in.yaml")
			local tree = load_file("./yaml-test-suite/data/CT4Q/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 7.18. Flow Mapping Adjacent Values, file: #C2DT tags: #spec #flow #mapping",
		function()
			print("### should parse the Spec Example 7.18. Flow Mapping Adjacent Values, file: #C2DT")
			local input = load_file("./yaml-test-suite/data/C2DT/in.yaml")
			local tree = load_file("./yaml-test-suite/data/C2DT/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Implicit Flow Mapping Key on one line, file: #LX3P tags: #complex-key #mapping #flow #sequence #1.3-err",
		function()
			print("### should parse the Implicit Flow Mapping Key on one line, file: #LX3P")
			local input = load_file("./yaml-test-suite/data/LX3P/in.yaml")
			local tree = load_file("./yaml-test-suite/data/LX3P/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.6. Line Folding [1.3], file: #93WF tags: #folded #spec #whitespace #scalar #1.3-mod",
		function()
			print("### should parse the Spec Example 6.6. Line Folding [1.3], file: #93WF")
			local input = load_file("./yaml-test-suite/data/93WF/in.yaml")
			local tree = load_file("./yaml-test-suite/data/93WF/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchors and Tags, file: #F2C7 tags: #anchor #tag", function()
		print("### should parse the Anchors and Tags, file: #F2C7")
		local input = load_file("./yaml-test-suite/data/F2C7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/F2C7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow Mapping Key on two lines, file: #C2SP tags: #error #flow #mapping", function()
		print("### should parse the Flow Mapping Key on two lines, file: #C2SP")
		local input = load_file("./yaml-test-suite/data/C2SP/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 7.9. Single Quoted Lines [1.3], file: #T4YY tags: #single #spec #scalar #whitespace #1.3-mod",
		function()
			print("### should parse the Spec Example 7.9. Single Quoted Lines [1.3], file: #T4YY")
			local input = load_file("./yaml-test-suite/data/T4YY/in.yaml")
			local tree = load_file("./yaml-test-suite/data/T4YY/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Comment between plain scalar lines, file: #BS4K tags: #error #scalar", function()
		print("### should parse the Comment between plain scalar lines, file: #BS4K")
		local input = load_file("./yaml-test-suite/data/BS4K/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Dash in flow sequence, file: #YJV2 tags: #flow #sequence", function()
		print("### should parse the Dash in flow sequence, file: #YJV2")
		local input = load_file("./yaml-test-suite/data/YJV2/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Single character streams, file: #SM9W tags: #sequence", function()
		print("### should parse the Single character streams, file: #SM9W")
		local input = load_file("./yaml-test-suite/data/SM9W/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/SM9W/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Single character streams, file: #SM9W tags: #mapping", function()
		print("### should parse the Single character streams, file: #SM9W")
		local input = load_file("./yaml-test-suite/data/SM9W/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/SM9W/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Implicit key followed by newline and adjacent value, file: #ZXT5 tags: #error #flow #mapping #sequence",
		function()
			print("### should parse the Implicit key followed by newline and adjacent value, file: #ZXT5")
			local input = load_file("./yaml-test-suite/data/ZXT5/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Trailing whitespace in streams, file: #JEF9 tags: #literal", function()
		print("### should parse the Trailing whitespace in streams, file: #JEF9")
		local input = load_file("./yaml-test-suite/data/JEF9/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JEF9/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing whitespace in streams, file: #JEF9 tags: #literal", function()
		print("### should parse the Trailing whitespace in streams, file: #JEF9")
		local input = load_file("./yaml-test-suite/data/JEF9/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JEF9/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing whitespace in streams, file: #JEF9 tags: #literal  #subject", function()
		print("### should parse the Trailing whitespace in streams, file: #JEF9")
		local input = load_file("./yaml-test-suite/data/JEF9/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JEF9/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid scalar at the end of mapping, file: #9CWY tags: #error #mapping #sequence", function()
		print("### should parse the Invalid scalar at the end of mapping, file: #9CWY")
		local input = load_file("./yaml-test-suite/data/9CWY/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 2.7. Two Documents in a Stream, file: #JHB9 tags: #spec #header", function()
		print("### should parse the Spec Example 2.7. Two Documents in a Stream, file: #JHB9")
		local input = load_file("./yaml-test-suite/data/JHB9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JHB9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Block scalar indicator order, file: #D83L tags: #indent #literal", function()
		print("### should parse the Block scalar indicator order, file: #D83L")
		local input = load_file("./yaml-test-suite/data/D83L/in.yaml")
		local tree = load_file("./yaml-test-suite/data/D83L/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.1. Block Scalar Header, file: #P2AD tags: #spec #literal #folded #comment #scalar",
		function()
			print("### should parse the Spec Example 8.1. Block Scalar Header, file: #P2AD")
			local input = load_file("./yaml-test-suite/data/P2AD/in.yaml")
			local tree = load_file("./yaml-test-suite/data/P2AD/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Tags for Root Objects, file: #35KP tags: #explicit-key #header #mapping #tag", function()
		print("### should parse the Tags for Root Objects, file: #35KP")
		local input = load_file("./yaml-test-suite/data/35KP/in.yaml")
		local tree = load_file("./yaml-test-suite/data/35KP/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.26. Ordered Mappings, file: #J7PZ tags: #spec #mapping #tag #unknown-tag",
		function()
			print("### should parse the Spec Example 2.26. Ordered Mappings, file: #J7PZ")
			local input = load_file("./yaml-test-suite/data/J7PZ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/J7PZ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 7.6. Double Quoted Lines [1.3], file: #9TFX tags: #double #spec #scalar #whitespace #1.3-mod",
		function()
			print("### should parse the Spec Example 7.6. Double Quoted Lines [1.3], file: #9TFX")
			local input = load_file("./yaml-test-suite/data/9TFX/in.yaml")
			local tree = load_file("./yaml-test-suite/data/9TFX/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 8.15. Block Sequence Entry Types, file: #W42U tags: #comment #spec #literal #sequence",
		function()
			print("### should parse the Spec Example 8.15. Block Sequence Entry Types, file: #W42U")
			local input = load_file("./yaml-test-suite/data/W42U/in.yaml")
			local tree = load_file("./yaml-test-suite/data/W42U/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchor and alias as mapping key, file: #SU74 tags: #error #anchor #alias #mapping", function()
		print("### should parse the Anchor and alias as mapping key, file: #SU74")
		local input = load_file("./yaml-test-suite/data/SU74/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 2.6. Mapping of Mappings, file: #ZF4X tags: #flow #spec #mapping", function()
		print("### should parse the Spec Example 2.6. Mapping of Mappings, file: #ZF4X")
		local input = load_file("./yaml-test-suite/data/ZF4X/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZF4X/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow sequence with invalid extra comma, file: #CTN5 tags: #error #flow #sequence", function()
		print("### should parse the Flow sequence with invalid extra comma, file: #CTN5")
		local input = load_file("./yaml-test-suite/data/CTN5/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Directive by itself with no document, file: #9MMA tags: #error #directive", function()
		print("### should parse the Directive by itself with no document, file: #9MMA")
		local input = load_file("./yaml-test-suite/data/9MMA/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 5.7. Block Scalar Indicators, file: #5BVJ tags: #spec #literal #folded #scalar",
		function()
			print("### should parse the Spec Example 5.7. Block Scalar Indicators, file: #5BVJ")
			local input = load_file("./yaml-test-suite/data/5BVJ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/5BVJ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Trailing content after quoted value, file: #Q4CL tags: #error #mapping #double", function()
		print("### should parse the Trailing content after quoted value, file: #Q4CL")
		local input = load_file("./yaml-test-suite/data/Q4CL/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tags in Explicit Mapping, file: #L94M tags: #explicit-key #tag #mapping", function()
		print("### should parse the Tags in Explicit Mapping, file: #L94M")
		local input = load_file("./yaml-test-suite/data/L94M/in.yaml")
		local tree = load_file("./yaml-test-suite/data/L94M/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.14. In the folded scalars, newlines become spaces, file: #96L6 tags: #spec #folded #scalar",
		function()
			print("### should parse the Spec Example 2.14. In the folded scalars, newlines become spaces, file: #96L6")
			local input = load_file("./yaml-test-suite/data/96L6/in.yaml")
			local tree = load_file("./yaml-test-suite/data/96L6/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchor before zero indented sequence, file: #SKE5 tags: #anchor #indent #sequence", function()
		print("### should parse the Anchor before zero indented sequence, file: #SKE5")
		local input = load_file("./yaml-test-suite/data/SKE5/in.yaml")
		local tree = load_file("./yaml-test-suite/data/SKE5/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 6.16. “TAG” directive, file: #U3C3 tags: #spec #header #tag", function()
		print("### should parse the Spec Example 6.16. “TAG” directive, file: #U3C3")
		local input = load_file("./yaml-test-suite/data/U3C3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/U3C3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Syntax character edge cases, file: #UKK6 tags: #edge #empty-key", function()
		print("### should parse the Syntax character edge cases, file: #UKK6")
		local input = load_file("./yaml-test-suite/data/UKK6/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/UKK6/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Syntax character edge cases, file: #UKK6 tags: #edge #empty-key", function()
		print("### should parse the Syntax character edge cases, file: #UKK6")
		local input = load_file("./yaml-test-suite/data/UKK6/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/UKK6/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Syntax character edge cases, file: #UKK6 tags: #edge #empty-key", function()
		print("### should parse the Syntax character edge cases, file: #UKK6")
		local input = load_file("./yaml-test-suite/data/UKK6/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/UKK6/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Mapping with anchor on document start line, file: #CXX2 tags: #anchor #error #header #mapping",
		function()
			print("### should parse the Mapping with anchor on document start line, file: #CXX2")
			local input = load_file("./yaml-test-suite/data/CXX2/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Implicit key followed by newline, file: #DK4H tags: #error #flow #mapping #sequence",
		function()
			print("### should parse the Implicit key followed by newline, file: #DK4H")
			local input = load_file("./yaml-test-suite/data/DK4H/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Various Trailing Comments, file: #XW4D tags: #comment #explicit-key #folded #1.3-err",
		function()
			print("### should parse the Various Trailing Comments, file: #XW4D")
			local input = load_file("./yaml-test-suite/data/XW4D/in.yaml")
			local tree = load_file("./yaml-test-suite/data/XW4D/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Non-Specific Tags on Scalars, file: #MZX3 tags: #folded #scalar", function()
		print("### should parse the Non-Specific Tags on Scalars, file: #MZX3")
		local input = load_file("./yaml-test-suite/data/MZX3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MZX3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/01/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/04/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/04/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/05/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/05/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/06/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/07/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/07/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs that look like indentation, file: #DK95 tags: #indent #whitespace", function()
		print("### should parse the Tabs that look like indentation, file: #DK95")
		local input = load_file("./yaml-test-suite/data/DK95/08/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DK95/08/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.9. Single Quoted Lines, file: #PRH3 tags: #single #spec #scalar #whitespace #upto-1.2",
		function()
			print("### should parse the Spec Example 7.9. Single Quoted Lines, file: #PRH3")
			local input = load_file("./yaml-test-suite/data/PRH3/in.yaml")
			local tree = load_file("./yaml-test-suite/data/PRH3/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Tab after document header, file: #K54U tags: #header #whitespace", function()
		print("### should parse the Tab after document header, file: #K54U")
		local input = load_file("./yaml-test-suite/data/K54U/in.yaml")
		local tree = load_file("./yaml-test-suite/data/K54U/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Scalar doc with '...' in content, file: #9MQT tags: #double #scalar", function()
		print("### should parse the Scalar doc with '...' in content, file: #9MQT")
		local input = load_file("./yaml-test-suite/data/9MQT/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9MQT/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Scalar doc with '...' in content, file: #9MQT tags: #double #scalar", function()
		print("### should parse the Scalar doc with '...' in content, file: #9MQT")
		local input = load_file("./yaml-test-suite/data/9MQT/01/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Multiline plain scalar with empty line, file: #36F6 tags: #mapping #scalar", function()
		print("### should parse the Multiline plain scalar with empty line, file: #36F6")
		local input = load_file("./yaml-test-suite/data/36F6/in.yaml")
		local tree = load_file("./yaml-test-suite/data/36F6/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Node and Mapping Key Anchors [1.3], file: #7BMT tags: #anchor #comment #mapping #1.3-mod",
		function()
			print("### should parse the Node and Mapping Key Anchors [1.3], file: #7BMT")
			local input = load_file("./yaml-test-suite/data/7BMT/in.yaml")
			local tree = load_file("./yaml-test-suite/data/7BMT/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Tag shorthand used in documents but only defined in the first, file: #QLJ7 tags: #error #directive #tag",
		function()
			print("### should parse the Tag shorthand used in documents but only defined in the first, file: #QLJ7")
			local input = load_file("./yaml-test-suite/data/QLJ7/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 8.21. Block Scalar Nodes, file: #M5C3 tags: #indent #spec #literal #folded #tag #local-tag #1.3-err",
		function()
			print("### should parse the Spec Example 8.21. Block Scalar Nodes, file: #M5C3")
			local input = load_file("./yaml-test-suite/data/M5C3/in.yaml")
			local tree = load_file("./yaml-test-suite/data/M5C3/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.1. Indentation Spaces, file: #6HB6 tags: #comment #flow #spec #indent #upto-1.2 #whitespace",
		function()
			print("### should parse the Spec Example 6.1. Indentation Spaces, file: #6HB6")
			local input = load_file("./yaml-test-suite/data/6HB6/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6HB6/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Bare document after document end marker, file: #7Z25 tags: #footer", function()
		print("### should parse the Bare document after document end marker, file: #7Z25")
		local input = load_file("./yaml-test-suite/data/7Z25/in.yaml")
		local tree = load_file("./yaml-test-suite/data/7Z25/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Two document start markers, file: #6XDY tags: #header", function()
		print("### should parse the Two document start markers, file: #6XDY")
		local input = load_file("./yaml-test-suite/data/6XDY/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6XDY/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.19. Secondary Tag Handle, file: #P76L tags: #spec #header #tag #unknown-tag",
		function()
			print("### should parse the Spec Example 6.19. Secondary Tag Handle, file: #P76L")
			local input = load_file("./yaml-test-suite/data/P76L/in.yaml")
			local tree = load_file("./yaml-test-suite/data/P76L/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Multiline double quoted flow mapping key, file: #9SA2 tags: #double #flow #mapping", function()
		print("### should parse the Multiline double quoted flow mapping key, file: #9SA2")
		local input = load_file("./yaml-test-suite/data/9SA2/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9SA2/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 8.14. Block Sequence, file: #JQ4R tags: #mapping #spec #sequence", function()
		print("### should parse the Spec Example 8.14. Block Sequence, file: #JQ4R")
		local input = load_file("./yaml-test-suite/data/JQ4R/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JQ4R/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Colon in Double Quoted String, file: #4UYU tags: #mapping #scalar #1.3-err", function()
		print("### should parse the Colon in Double Quoted String, file: #4UYU")
		local input = load_file("./yaml-test-suite/data/4UYU/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4UYU/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Empty keys in block and flow mapping, file: #NKF9 tags: #empty-key #mapping", function()
		print("### should parse the Empty keys in block and flow mapping, file: #NKF9")
		local input = load_file("./yaml-test-suite/data/NKF9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/NKF9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.3. Completely Empty Flow Nodes, file: #FRK4 tags: #empty-key #explicit-key #spec #flow #mapping",
		function()
			print("### should parse the Spec Example 7.3. Completely Empty Flow Nodes, file: #FRK4")
			local input = load_file("./yaml-test-suite/data/FRK4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/FRK4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Literal scalars, file: #4WA9 tags: #indent #literal", function()
		print("### should parse the Literal scalars, file: #4WA9")
		local input = load_file("./yaml-test-suite/data/4WA9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4WA9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.19. Compact Block Mappings, file: #V9D5 tags: #complex-key #explicit-key #spec #mapping",
		function()
			print("### should parse the Spec Example 8.19. Compact Block Mappings, file: #V9D5")
			local input = load_file("./yaml-test-suite/data/V9D5/in.yaml")
			local tree = load_file("./yaml-test-suite/data/V9D5/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Block sequence indentation, file: #M6YH tags: #indent", function()
		print("### should parse the Block sequence indentation, file: #M6YH")
		local input = load_file("./yaml-test-suite/data/M6YH/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M6YH/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Node anchor not indented, file: #H7J7 tags: #anchor #error #indent #tag", function()
		print("### should parse the Node anchor not indented, file: #H7J7")
		local input = load_file("./yaml-test-suite/data/H7J7/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Flow Mapping in Block Sequence, file: #MXS3 tags: #mapping #sequence #flow", function()
		print("### should parse the Flow Mapping in Block Sequence, file: #MXS3")
		local input = load_file("./yaml-test-suite/data/MXS3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MXS3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.21. Block Scalar Nodes [1.3], file: #Z67P tags: #indent #spec #literal #folded #tag #local-tag #1.3-mod",
		function()
			print("### should parse the Spec Example 8.21. Block Scalar Nodes [1.3], file: #Z67P")
			local input = load_file("./yaml-test-suite/data/Z67P/in.yaml")
			local tree = load_file("./yaml-test-suite/data/Z67P/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchors in Mapping, file: #ZH7C tags: #anchor #mapping", function()
		print("### should parse the Anchors in Mapping, file: #ZH7C")
		local input = load_file("./yaml-test-suite/data/ZH7C/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZH7C/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.10. Folded Lines - 8.13. Final Empty Lines, file: #7T8X tags: #spec #folded #scalar #comment #1.3-err",
		function()
			print("### should parse the Spec Example 8.10. Folded Lines - 8.13. Final Empty Lines, file: #7T8X")
			local input = load_file("./yaml-test-suite/data/7T8X/in.yaml")
			local tree = load_file("./yaml-test-suite/data/7T8X/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Multiline doublequoted flow mapping key without value, file: #9BXH tags: #double #flow #mapping",
		function()
			print("### should parse the Multiline doublequoted flow mapping key without value, file: #9BXH")
			local input = load_file("./yaml-test-suite/data/9BXH/in.yaml")
			local tree = load_file("./yaml-test-suite/data/9BXH/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/00/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/01/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MUS6/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MUS6/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/04/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MUS6/04/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/05/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MUS6/05/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #MUS6 tags: #directive", function()
		print("### should parse the Directive variants, file: #MUS6")
		local input = load_file("./yaml-test-suite/data/MUS6/06/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MUS6/06/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Zero-indented sequences in explicit mapping keys, file: #6PBE tags: #explicit-key #mapping #sequence",
		function()
			print("### should parse the Zero-indented sequences in explicit mapping keys, file: #6PBE")
			local input = load_file("./yaml-test-suite/data/6PBE/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6PBE/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Empty implicit key in single pair flow sequences, file: #CFD4 tags: #empty-key #flow #sequence",
		function()
			print("### should parse the Empty implicit key in single pair flow sequences, file: #CFD4")
			local input = load_file("./yaml-test-suite/data/CFD4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/CFD4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 2.25. Unordered Sets, file: #2XXW tags: #spec #mapping #unknown-tag #explicit-key",
		function()
			print("### should parse the Spec Example 2.25. Unordered Sets, file: #2XXW")
			local input = load_file("./yaml-test-suite/data/2XXW/in.yaml")
			local tree = load_file("./yaml-test-suite/data/2XXW/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Mixed Block Mapping (explicit to implicit), file: #GH63 tags: #explicit-key #mapping",
		function()
			print("### should parse the Mixed Block Mapping (explicit to implicit), file: #GH63")
			local input = load_file("./yaml-test-suite/data/GH63/in.yaml")
			local tree = load_file("./yaml-test-suite/data/GH63/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Whitespace After Scalars in Flow, file: #LP6E tags: #flow #scalar #whitespace", function()
		print("### should parse the Whitespace After Scalars in Flow, file: #LP6E")
		local input = load_file("./yaml-test-suite/data/LP6E/in.yaml")
		local tree = load_file("./yaml-test-suite/data/LP6E/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 5.12. Tabs and Spaces, file: #J3BT tags: #spec #whitespace #upto-1.2", function()
		print("### should parse the Spec Example 5.12. Tabs and Spaces, file: #J3BT")
		local input = load_file("./yaml-test-suite/data/J3BT/in.yaml")
		local tree = load_file("./yaml-test-suite/data/J3BT/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.21. Local Tag Prefix, file: #5TYM tags: #local-tag #spec #directive #tag",
		function()
			print("### should parse the Spec Example 6.21. Local Tag Prefix, file: #5TYM")
			local input = load_file("./yaml-test-suite/data/5TYM/in.yaml")
			local tree = load_file("./yaml-test-suite/data/5TYM/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Empty Lines Between Mapping Elements, file: #J7VC tags: #whitespace #mapping", function()
		print("### should parse the Empty Lines Between Mapping Elements, file: #J7VC")
		local input = load_file("./yaml-test-suite/data/J7VC/in.yaml")
		local tree = load_file("./yaml-test-suite/data/J7VC/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multiple Entry Block Sequence, file: #K4SU tags: #sequence", function()
		print("### should parse the Multiple Entry Block Sequence, file: #K4SU")
		local input = load_file("./yaml-test-suite/data/K4SU/in.yaml")
		local tree = load_file("./yaml-test-suite/data/K4SU/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Double quoted scalar with escaped single quote, file: #HRE5 tags: #double #error #single",
		function()
			print("### should parse the Double quoted scalar with escaped single quote, file: #HRE5")
			local input = load_file("./yaml-test-suite/data/HRE5/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Simple Mapping Indent, file: #9J7A tags: #simple #mapping #indent", function()
		print("### should parse the Simple Mapping Indent, file: #9J7A")
		local input = load_file("./yaml-test-suite/data/9J7A/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9J7A/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Whitespace around colon in mappings, file: #26DV tags: #alias #mapping #whitespace", function()
		print("### should parse the Whitespace around colon in mappings, file: #26DV")
		local input = load_file("./yaml-test-suite/data/26DV/in.yaml")
		local tree = load_file("./yaml-test-suite/data/26DV/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.9. Folded Scalar [1.3], file: #B3HG tags: #spec #folded #scalar #1.3-mod",
		function()
			print("### should parse the Spec Example 8.9. Folded Scalar [1.3], file: #B3HG")
			local input = load_file("./yaml-test-suite/data/B3HG/in.yaml")
			local tree = load_file("./yaml-test-suite/data/B3HG/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 5.4. Flow Collection Indicators, file: #UDR7 tags: #spec #flow #sequence #mapping",
		function()
			print("### should parse the Spec Example 5.4. Flow Collection Indicators, file: #UDR7")
			local input = load_file("./yaml-test-suite/data/UDR7/in.yaml")
			local tree = load_file("./yaml-test-suite/data/UDR7/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 2.2. Mapping Scalars to Scalars, file: #SYW4 tags: #spec #scalar #comment",
		function()
			print("### should parse the Spec Example 2.2. Mapping Scalars to Scalars, file: #SYW4")
			local input = load_file("./yaml-test-suite/data/SYW4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/SYW4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Trailing content that looks like a mapping, file: #JY7Z tags: #error #mapping #double",
		function()
			print("### should parse the Trailing content that looks like a mapping, file: #JY7Z")
			local input = load_file("./yaml-test-suite/data/JY7Z/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Multiline Scalar in Mapping, file: #A984 tags: #scalar", function()
		print("### should parse the Multiline Scalar in Mapping, file: #A984")
		local input = load_file("./yaml-test-suite/data/A984/in.yaml")
		local tree = load_file("./yaml-test-suite/data/A984/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.16. Flow Mapping Entries, file: #DFF7 tags: #explicit-key #spec #flow #mapping",
		function()
			print("### should parse the Spec Example 7.16. Flow Mapping Entries, file: #DFF7")
			local input = load_file("./yaml-test-suite/data/DFF7/in.yaml")
			local tree = load_file("./yaml-test-suite/data/DFF7/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Anchor before sequence entry on same line, file: #SY6V tags: #anchor #error #sequence",
		function()
			print("### should parse the Anchor before sequence entry on same line, file: #SY6V")
			local input = load_file("./yaml-test-suite/data/SY6V/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Scalars in flow start with syntax char, file: #HM87 tags: #flow #scalar", function()
		print("### should parse the Scalars in flow start with syntax char, file: #HM87")
		local input = load_file("./yaml-test-suite/data/HM87/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/HM87/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Scalars in flow start with syntax char, file: #HM87 tags: #flow #scalar", function()
		print("### should parse the Scalars in flow start with syntax char, file: #HM87")
		local input = load_file("./yaml-test-suite/data/HM87/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/HM87/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Single block sequence with anchor, file: #3R3P tags: #anchor #sequence", function()
		print("### should parse the Single block sequence with anchor, file: #3R3P")
		local input = load_file("./yaml-test-suite/data/3R3P/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3R3P/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.2. Block Indentation Indicator [1.3], file: #4QFQ tags: #spec #literal #folded #scalar #libyaml-err #1.3-mod #whitespace",
		function()
			print("### should parse the Spec Example 8.2. Block Indentation Indicator [1.3], file: #4QFQ")
			local input = load_file("./yaml-test-suite/data/4QFQ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/4QFQ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Three dashes and content without space [1.3], file: #EXG3 tags: #scalar #1.3-mod", function()
		print("### should parse the Three dashes and content without space [1.3], file: #EXG3")
		local input = load_file("./yaml-test-suite/data/EXG3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/EXG3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Nested implicit complex keys, file: #4FJ6 tags: #complex-key #flow #mapping #sequence",
		function()
			print("### should parse the Nested implicit complex keys, file: #4FJ6")
			local input = load_file("./yaml-test-suite/data/4FJ6/in.yaml")
			local tree = load_file("./yaml-test-suite/data/4FJ6/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Flow sequence with invalid extra closing bracket, file: #4H7K tags: #error #flow #sequence",
		function()
			print("### should parse the Flow sequence with invalid extra closing bracket, file: #4H7K")
			local input = load_file("./yaml-test-suite/data/4H7K/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Nested top level flow mapping, file: #ZK9H tags: #flow #indent #mapping #sequence", function()
		print("### should parse the Nested top level flow mapping, file: #ZK9H")
		local input = load_file("./yaml-test-suite/data/ZK9H/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZK9H/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.8. Flow Folding [1.3], file: #6WPF tags: #double #spec #whitespace #scalar #1.3-mod",
		function()
			print("### should parse the Spec Example 6.8. Flow Folding [1.3], file: #6WPF")
			local input = load_file("./yaml-test-suite/data/6WPF/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6WPF/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.22. Global Tag Prefix, file: #Z9M4 tags: #spec #header #tag #unknown-tag",
		function()
			print("### should parse the Spec Example 6.22. Global Tag Prefix, file: #Z9M4")
			local input = load_file("./yaml-test-suite/data/Z9M4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/Z9M4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 5.5. Comment Indicator, file: #98YD tags: #spec #comment #empty", function()
		print("### should parse the Spec Example 5.5. Comment Indicator, file: #98YD")
		local input = load_file("./yaml-test-suite/data/98YD/in.yaml")
		local tree = load_file("./yaml-test-suite/data/98YD/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.19. Single Pair Flow Mappings, file: #QF4Y tags: #spec #flow #mapping",
		function()
			print("### should parse the Spec Example 7.19. Single Pair Flow Mappings, file: #QF4Y")
			local input = load_file("./yaml-test-suite/data/QF4Y/in.yaml")
			local tree = load_file("./yaml-test-suite/data/QF4Y/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Nested flow mapping sequence and mappings, file: #R52L tags: #flow #mapping #sequence",
		function()
			print("### should parse the Nested flow mapping sequence and mappings, file: #R52L")
			local input = load_file("./yaml-test-suite/data/R52L/in.yaml")
			local tree = load_file("./yaml-test-suite/data/R52L/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Aliases in Block Sequence, file: #V55R tags: #alias #sequence", function()
		print("### should parse the Aliases in Block Sequence, file: #V55R")
		local input = load_file("./yaml-test-suite/data/V55R/in.yaml")
		local tree = load_file("./yaml-test-suite/data/V55R/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.5. Chomping Trailing Lines, file: #F8F9 tags: #spec #literal #scalar #comment",
		function()
			print("### should parse the Spec Example 8.5. Chomping Trailing Lines, file: #F8F9")
			local input = load_file("./yaml-test-suite/data/F8F9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/F8F9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Allowed characters in plain scalars, file: #FBC9 tags: #scalar", function()
		print("### should parse the Allowed characters in plain scalars, file: #FBC9")
		local input = load_file("./yaml-test-suite/data/FBC9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/FBC9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow mapping missing a separating comma, file: #T833 tags: #error #flow #mapping", function()
		print("### should parse the Flow mapping missing a separating comma, file: #T833")
		local input = load_file("./yaml-test-suite/data/T833/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Directive without document, file: #B63P tags: #error #directive #document", function()
		print("### should parse the Directive without document, file: #B63P")
		local input = load_file("./yaml-test-suite/data/B63P/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Scalar value with two anchors, file: #4JVG tags: #anchor #error #mapping", function()
		print("### should parse the Scalar value with two anchors, file: #4JVG")
		local input = load_file("./yaml-test-suite/data/4JVG/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 6.5. Empty Lines [1.3], file: #XV9V tags: #literal #spec #scalar #1.3-mod",
		function()
			print("### should parse the Spec Example 6.5. Empty Lines [1.3], file: #XV9V")
			local input = load_file("./yaml-test-suite/data/XV9V/in.yaml")
			local tree = load_file("./yaml-test-suite/data/XV9V/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.7. Block Folding, file: #MJS9 tags: #folded #spec #scalar #whitespace #1.3-err",
		function()
			print("### should parse the Spec Example 6.7. Block Folding, file: #MJS9")
			local input = load_file("./yaml-test-suite/data/MJS9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/MJS9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Invalid sequene item on same line as previous item, file: #P2EQ tags: #error #flow #mapping #sequence",
		function()
			print("### should parse the Invalid sequene item on same line as previous item, file: #P2EQ")
			local input = load_file("./yaml-test-suite/data/P2EQ/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Mixed Block Mapping (implicit to explicit), file: #RR7F tags: #explicit-key #mapping",
		function()
			print("### should parse the Mixed Block Mapping (implicit to explicit), file: #RR7F")
			local input = load_file("./yaml-test-suite/data/RR7F/in.yaml")
			local tree = load_file("./yaml-test-suite/data/RR7F/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.3. Separation Spaces, file: #6BCT tags: #spec #libyaml-err #sequence #whitespace #upto-1.2",
		function()
			print("### should parse the Spec Example 6.3. Separation Spaces, file: #6BCT")
			local input = load_file("./yaml-test-suite/data/6BCT/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6BCT/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Block Submapping, file: #KMK3 tags: #mapping", function()
		print("### should parse the Block Submapping, file: #KMK3")
		local input = load_file("./yaml-test-suite/data/KMK3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/KMK3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Multiline plain value with tabs on empty lines, file: #NB6Z tags: #scalar #whitespace",
		function()
			print("### should parse the Multiline plain value with tabs on empty lines, file: #NB6Z")
			local input = load_file("./yaml-test-suite/data/NB6Z/in.yaml")
			local tree = load_file("./yaml-test-suite/data/NB6Z/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Invalid comment after end of flow sequence, file: #9JBA tags: #comment #error #flow #sequence",
		function()
			print("### should parse the Invalid comment after end of flow sequence, file: #9JBA")
			local input = load_file("./yaml-test-suite/data/9JBA/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		'should parse the Spec Example 2.15. Folded newlines are preserved for "more indented" and blank lines, file: #6VJK tags: #spec #folded #scalar #1.3-err',
		function()
			print(
				'### should parse the Spec Example 2.15. Folded newlines are preserved for "more indented" and blank lines, file: #6VJK'
			)
			local input = load_file("./yaml-test-suite/data/6VJK/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6VJK/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 6.23. Node Properties, file: #HMQ5 tags: #spec #tag #alias", function()
		print("### should parse the Spec Example 6.23. Node Properties, file: #HMQ5")
		local input = load_file("./yaml-test-suite/data/HMQ5/in.yaml")
		local tree = load_file("./yaml-test-suite/data/HMQ5/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Explicit Non-Specific Tag [1.3], file: #52DL tags: #tag #1.3-mod", function()
		print("### should parse the Explicit Non-Specific Tag [1.3], file: #52DL")
		local input = load_file("./yaml-test-suite/data/52DL/in.yaml")
		local tree = load_file("./yaml-test-suite/data/52DL/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Missing document-end marker before directive, file: #EB22 tags: #error #directive #footer",
		function()
			print("### should parse the Missing document-end marker before directive, file: #EB22")
			local input = load_file("./yaml-test-suite/data/EB22/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 7.7. Single Quoted Characters, file: #4GC6 tags: #spec #scalar #1.3-err",
		function()
			print("### should parse the Spec Example 7.7. Single Quoted Characters, file: #4GC6")
			local input = load_file("./yaml-test-suite/data/4GC6/in.yaml")
			local tree = load_file("./yaml-test-suite/data/4GC6/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Invalid mapping in plain multiline, file: #2CMS tags: #error #mapping", function()
		print("### should parse the Invalid mapping in plain multiline, file: #2CMS")
		local input = load_file("./yaml-test-suite/data/2CMS/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tags for Flow Objects, file: #EHF6 tags: #tag #flow #mapping #sequence", function()
		print("### should parse the Tags for Flow Objects, file: #EHF6")
		local input = load_file("./yaml-test-suite/data/EHF6/in.yaml")
		local tree = load_file("./yaml-test-suite/data/EHF6/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Various combinations of tags and anchors, file: #9KAX tags: #anchor #mapping #1.3-err #tag",
		function()
			print("### should parse the Various combinations of tags and anchors, file: #9KAX")
			local input = load_file("./yaml-test-suite/data/9KAX/in.yaml")
			local tree = load_file("./yaml-test-suite/data/9KAX/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Document-end marker, file: #HWV9 tags: #footer", function()
		print("### should parse the Document-end marker, file: #HWV9")
		local input = load_file("./yaml-test-suite/data/HWV9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/HWV9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.13. Reserved Directives [1.3], file: #2LFX tags: #spec #directive #header #double #1.3-mod",
		function()
			print("### should parse the Spec Example 6.13. Reserved Directives [1.3], file: #2LFX")
			local input = load_file("./yaml-test-suite/data/2LFX/in.yaml")
			local tree = load_file("./yaml-test-suite/data/2LFX/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.5. Empty Lines, file: #5GBF tags: #double #literal #spec #scalar #upto-1.2 #whitespace",
		function()
			print("### should parse the Spec Example 6.5. Empty Lines, file: #5GBF")
			local input = load_file("./yaml-test-suite/data/5GBF/in.yaml")
			local tree = load_file("./yaml-test-suite/data/5GBF/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Tab indented top flow, file: #6CA3 tags: #indent #whitespace", function()
		print("### should parse the Tab indented top flow, file: #6CA3")
		local input = load_file("./yaml-test-suite/data/6CA3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6CA3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Backslashes in singlequotes, file: #6H3V tags: #scalar #single", function()
		print("### should parse the Backslashes in singlequotes, file: #6H3V")
		local input = load_file("./yaml-test-suite/data/6H3V/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6H3V/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/000/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/001/in.yaml")
		local tree = load_file("./yaml-test-suite/data/Y79Y/001/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/002/in.yaml")
		local tree = load_file("./yaml-test-suite/data/Y79Y/002/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/003/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/004/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/005/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/006/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/007/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/008/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/009/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Tabs in various contexts, file: #Y79Y tags: #whitespace", function()
		print("### should parse the Tabs in various contexts, file: #Y79Y")
		local input = load_file("./yaml-test-suite/data/Y79Y/010/in.yaml")
		local tree = load_file("./yaml-test-suite/data/Y79Y/010/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 2.8. Play by Play Feed from a Game, file: #U9NS tags: #spec #header", function()
		print("### should parse the Spec Example 2.8. Play by Play Feed from a Game, file: #U9NS")
		local input = load_file("./yaml-test-suite/data/U9NS/in.yaml")
		local tree = load_file("./yaml-test-suite/data/U9NS/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.12. Plain Lines, file: #HS5T tags: #spec #scalar #whitespace #upto-1.2",
		function()
			print("### should parse the Spec Example 7.12. Plain Lines, file: #HS5T")
			local input = load_file("./yaml-test-suite/data/HS5T/in.yaml")
			local tree = load_file("./yaml-test-suite/data/HS5T/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Wrong indendation in Sequence, file: #4HVU tags: #error #sequence #indent",
		function() -- USED -- USED
			print("### should parse the Wrong indendation in Sequence, file: #4HVU")
			local input = load_file("./yaml-test-suite/data/4HVU/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Spec Example 7.14. Flow Sequence Entries, file: #8UDB tags: #spec #flow #sequence", function()
		print("### should parse the Spec Example 7.14. Flow Sequence Entries, file: #8UDB")
		local input = load_file("./yaml-test-suite/data/8UDB/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8UDB/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.4. Chomping Final Line Break, file: #A6F9 tags: #spec #literal #scalar",
		function()
			print("### should parse the Spec Example 8.4. Chomping Final Line Break, file: #A6F9")
			local input = load_file("./yaml-test-suite/data/A6F9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/A6F9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Invalid content after document end marker, file: #3HFZ tags: #error #footer", function()
		print("### should parse the Invalid content after document end marker, file: #3HFZ")
		local input = load_file("./yaml-test-suite/data/3HFZ/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Trailing comment in multiline plain scalar, file: #BF9H tags: #comment #error #scalar",
		function()
			print("### should parse the Trailing comment in multiline plain scalar, file: #BF9H")
			local input = load_file("./yaml-test-suite/data/BF9H/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Question marks in scalars, file: #JR7V tags: #flow #scalar", function()
		print("### should parse the Question marks in scalars, file: #JR7V")
		local input = load_file("./yaml-test-suite/data/JR7V/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JR7V/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.6. Empty Scalar Chomping, file: #K858 tags: #spec #folded #literal #whitespace",
		function()
			print("### should parse the Spec Example 8.6. Empty Scalar Chomping, file: #K858")
			local input = load_file("./yaml-test-suite/data/K858/in.yaml")
			local tree = load_file("./yaml-test-suite/data/K858/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Flow Mapping, file: #54T7 tags: #flow #mapping", function()
		print("### should parse the Flow Mapping, file: #54T7")
		local input = load_file("./yaml-test-suite/data/54T7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/54T7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Wrong indented multiline quoted scalar, file: #QB6E tags: #double #error #indent", function()
		print("### should parse the Wrong indented multiline quoted scalar, file: #QB6E")
		local input = load_file("./yaml-test-suite/data/QB6E/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Wrong indendation in mapping, file: #EW3V tags: #error #mapping #indent", function()
		print("### should parse the Wrong indendation in mapping, file: #EW3V")
		local input = load_file("./yaml-test-suite/data/EW3V/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Scalars on --- line, file: #KSS4 tags: #anchor #header #scalar #1.3-err", function()
		print("### should parse the Scalars on --- line, file: #KSS4")
		local input = load_file("./yaml-test-suite/data/KSS4/in.yaml")
		local tree = load_file("./yaml-test-suite/data/KSS4/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Comment without whitespace after block scalar indicator, file: #X4QW tags: #folded #comment #error #whitespace",
		function()
			print("### should parse the Comment without whitespace after block scalar indicator, file: #X4QW")
			local input = load_file("./yaml-test-suite/data/X4QW/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 6.2. Indentation Indicators, file: #A2M4 tags: #explicit-key #spec #libyaml-err #indent #whitespace #sequence #upto-1.2",
		function()
			print("### should parse the Spec Example 6.2. Indentation Indicators, file: #A2M4")
			local input = load_file("./yaml-test-suite/data/A2M4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/A2M4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchor with colon in the middle, file: #Y2GN tags: #anchor", function()
		print("### should parse the Anchor with colon in the middle, file: #Y2GN")
		local input = load_file("./yaml-test-suite/data/Y2GN/in.yaml")
		local tree = load_file("./yaml-test-suite/data/Y2GN/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.4. Line Prefixes, file: #4ZYM tags: #spec #scalar #literal #double #upto-1.2 #whitespace",
		function()
			print("### should parse the Spec Example 6.4. Line Prefixes, file: #4ZYM")
			local input = load_file("./yaml-test-suite/data/4ZYM/in.yaml")
			local tree = load_file("./yaml-test-suite/data/4ZYM/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Zero indented block scalar with line that looks like a comment, file: #DK3J tags: #comment #folded #scalar",
		function()
			print("### should parse the Zero indented block scalar with line that looks like a comment, file: #DK3J")
			local input = load_file("./yaml-test-suite/data/DK3J/in.yaml")
			local tree = load_file("./yaml-test-suite/data/DK3J/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Invalid mapping in plain single line value, file: #ZCZ6 tags: #error #mapping #scalar",
		function()
			print("### should parse the Invalid mapping in plain single line value, file: #ZCZ6")
			local input = load_file("./yaml-test-suite/data/ZCZ6/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 2.12. Compact Nested Mapping, file: #9U5K tags: #spec #mapping #sequence",
		function()
			print("### should parse the Spec Example 2.12. Compact Nested Mapping, file: #9U5K")
			local input = load_file("./yaml-test-suite/data/9U5K/in.yaml")
			local tree = load_file("./yaml-test-suite/data/9U5K/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Block Sequence in Block Mapping, file: #8QBE tags: #mapping #sequence", function()
		print("### should parse the Block Sequence in Block Mapping, file: #8QBE")
		local input = load_file("./yaml-test-suite/data/8QBE/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8QBE/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Single Entry Block Sequence, file: #65WH tags: #sequence", function()
		print("### should parse the Single Entry Block Sequence, file: #65WH")
		local input = load_file("./yaml-test-suite/data/65WH/in.yaml")
		local tree = load_file("./yaml-test-suite/data/65WH/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Plain URL in flow mapping, file: #UDM2 tags: #flow #scalar", function()
		print("### should parse the Plain URL in flow mapping, file: #UDM2")
		local input = load_file("./yaml-test-suite/data/UDM2/in.yaml")
		local tree = load_file("./yaml-test-suite/data/UDM2/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.16. Indentation determines scope, file: #HMK4 tags: #spec #folded #literal",
		function()
			print("### should parse the Spec Example 2.16. Indentation determines scope, file: #HMK4")
			local input = load_file("./yaml-test-suite/data/HMK4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/HMK4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Explicit key and value seperated by comment, file: #X8DW tags: #comment #explicit-key #mapping",
		function()
			print("### should parse the Explicit key and value seperated by comment, file: #X8DW")
			local input = load_file("./yaml-test-suite/data/X8DW/in.yaml")
			local tree = load_file("./yaml-test-suite/data/X8DW/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Lookahead test cases, file: #AZW3 tags: #mapping #edge", function()
		print("### should parse the Lookahead test cases, file: #AZW3")
		local input = load_file("./yaml-test-suite/data/AZW3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/AZW3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow Sequence, file: #DHP8 tags: #flow #sequence", function()
		print("### should parse the Flow Sequence, file: #DHP8")
		local input = load_file("./yaml-test-suite/data/DHP8/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DHP8/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Anchor for empty node, file: #6KGN tags: #alias #anchor", function()
		print("### should parse the Anchor for empty node, file: #6KGN")
		local input = load_file("./yaml-test-suite/data/6KGN/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6KGN/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Nested flow collections, file: #M7NX tags: #flow #mapping #sequence", function()
		print("### should parse the Nested flow collections, file: #M7NX")
		local input = load_file("./yaml-test-suite/data/M7NX/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M7NX/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.5. Double Quoted Line Breaks, file: #NP9H tags: #double #spec #scalar #whitespace #upto-1.2",
		function()
			print("### should parse the Spec Example 7.5. Double Quoted Line Breaks, file: #NP9H")
			local input = load_file("./yaml-test-suite/data/NP9H/in.yaml")
			local tree = load_file("./yaml-test-suite/data/NP9H/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Tags on Empty Scalars, file: #FH7J tags: #tag #scalar", function()
		print("### should parse the Tags on Empty Scalars, file: #FH7J")
		local input = load_file("./yaml-test-suite/data/FH7J/in.yaml")
		local tree = load_file("./yaml-test-suite/data/FH7J/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 7.2. Empty Content, file: #WZ62 tags: #spec #flow #scalar #tag", function()
		print("### should parse the Spec Example 7.2. Empty Content, file: #WZ62")
		local input = load_file("./yaml-test-suite/data/WZ62/in.yaml")
		local tree = load_file("./yaml-test-suite/data/WZ62/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Multiline Scalar at Top Level [1.3], file: #EX5H tags: #scalar #whitespace #1.3-mod",
		function()
			print("### should parse the Multiline Scalar at Top Level [1.3], file: #EX5H")
			local input = load_file("./yaml-test-suite/data/EX5H/in.yaml")
			local tree = load_file("./yaml-test-suite/data/EX5H/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Multiline double quoted implicit keys, file: #7LBH tags: #error #double", function()
		print("### should parse the Multiline double quoted implicit keys, file: #7LBH")
		local input = load_file("./yaml-test-suite/data/7LBH/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Colon and adjacent value after comment on next line, file: #K3WX tags: #comment #flow #mapping",
		function()
			print("### should parse the Colon and adjacent value after comment on next line, file: #K3WX")
			local input = load_file("./yaml-test-suite/data/K3WX/in.yaml")
			local tree = load_file("./yaml-test-suite/data/K3WX/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Plain mapping key ending with colon, file: #8CWC tags: #mapping #scalar", function()
		print("### should parse the Plain mapping key ending with colon, file: #8CWC")
		local input = load_file("./yaml-test-suite/data/8CWC/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8CWC/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Missing colon, file: #7MNF tags: #error #mapping", function()
		print("### should parse the Missing colon, file: #7MNF")
		local input = load_file("./yaml-test-suite/data/7MNF/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Document start on last line, file: #PUW8 tags: #header", function()
		print("### should parse the Document start on last line, file: #PUW8")
		local input = load_file("./yaml-test-suite/data/PUW8/in.yaml")
		local tree = load_file("./yaml-test-suite/data/PUW8/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Comment and document-end marker, file: #QT73 tags: #comment #footer", function()
		print("### should parse the Comment and document-end marker, file: #QT73")
		local input = load_file("./yaml-test-suite/data/QT73/in.yaml")
		local tree = load_file("./yaml-test-suite/data/QT73/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Tab at beginning of line followed by a flow mapping, file: #Q5MG tags: #flow #whitespace",
		function()
			print("### should parse the Tab at beginning of line followed by a flow mapping, file: #Q5MG")
			local input = load_file("./yaml-test-suite/data/Q5MG/in.yaml")
			local tree = load_file("./yaml-test-suite/data/Q5MG/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Flow Sequence in Flow Sequence, file: #FUP4 tags: #sequence #flow", function()
		print("### should parse the Flow Sequence in Flow Sequence, file: #FUP4")
		local input = load_file("./yaml-test-suite/data/FUP4/in.yaml")
		local tree = load_file("./yaml-test-suite/data/FUP4/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.18. Implicit Block Mapping Entries, file: #S3PD tags: #empty-key #spec #mapping",
		function()
			print("### should parse the Spec Example 8.18. Implicit Block Mapping Entries, file: #S3PD")
			local input = load_file("./yaml-test-suite/data/S3PD/in.yaml")
			local tree = load_file("./yaml-test-suite/data/S3PD/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Comment in plain multiline value, file: #8XDJ tags: #error #comment #scalar", function()
		print("### should parse the Comment in plain multiline value, file: #8XDJ")
		local input = load_file("./yaml-test-suite/data/8XDJ/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Flow mapping colon on line after key, file: #4MUZ tags: #flow #mapping", function()
		print("### should parse the Flow mapping colon on line after key, file: #4MUZ")
		local input = load_file("./yaml-test-suite/data/4MUZ/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4MUZ/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow mapping colon on line after key, file: #4MUZ tags: #flow #mapping", function()
		print("### should parse the Flow mapping colon on line after key, file: #4MUZ")
		local input = load_file("./yaml-test-suite/data/4MUZ/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4MUZ/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow mapping colon on line after key, file: #4MUZ tags: #flow #mapping", function()
		print("### should parse the Flow mapping colon on line after key, file: #4MUZ")
		local input = load_file("./yaml-test-suite/data/4MUZ/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4MUZ/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.11. Mapping between Sequences, file: #M5DY tags: #complex-key #explicit-key #spec #mapping #sequence",
		function()
			print("### should parse the Spec Example 2.11. Mapping between Sequences, file: #M5DY")
			local input = load_file("./yaml-test-suite/data/M5DY/in.yaml")
			local tree = load_file("./yaml-test-suite/data/M5DY/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Invalid text after block scalar indicator, file: #S4GJ tags: #error #folded", function()
		print("### should parse the Invalid text after block scalar indicator, file: #S4GJ")
		local input = load_file("./yaml-test-suite/data/S4GJ/in.yaml")
		local result, mes = yalua.stream(input)
		print(mes)
		assert.Equal(nil, result)
	end)
	it("should parse the Legal tab after indentation, file: #UV7Q tags: #indent #whitespace", function()
		print("### should parse the Legal tab after indentation, file: #UV7Q")
		local input = load_file("./yaml-test-suite/data/UV7Q/in.yaml")
		local tree = load_file("./yaml-test-suite/data/UV7Q/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multiline implicit keys, file: #G7JE tags: #error #mapping", function()
		print("### should parse the Multiline implicit keys, file: #G7JE")
		local input = load_file("./yaml-test-suite/data/G7JE/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Folded Block Scalar [1.3], file: #4Q9F tags: #folded #scalar #1.3-mod #whitespace", function()
		print("### should parse the Folded Block Scalar [1.3], file: #4Q9F")
		local input = load_file("./yaml-test-suite/data/4Q9F/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4Q9F/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Sequence entry that looks like two with wrong indentation, file: #AB8U tags: #scalar #sequence",
		function()
			print("### should parse the Sequence entry that looks like two with wrong indentation, file: #AB8U")
			local input = load_file("./yaml-test-suite/data/AB8U/in.yaml")
			local tree = load_file("./yaml-test-suite/data/AB8U/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Bad indentation in mapping, file: #N4JP tags: #error #mapping #indent #double", function()
		print("### should parse the Bad indentation in mapping, file: #N4JP")
		local input = load_file("./yaml-test-suite/data/N4JP/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Anchor with unicode character, file: #8XYN tags: #anchor", function()
		print("### should parse the Anchor with unicode character, file: #8XYN")
		local input = load_file("./yaml-test-suite/data/8XYN/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8XYN/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Invalid anchor in zero indented sequence, file: #G9HC tags: #anchor #error #sequence",
		function()
			print("### should parse the Invalid anchor in zero indented sequence, file: #G9HC")
			local input = load_file("./yaml-test-suite/data/G9HC/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Spec Example 9.6. Stream [1.3], file: #9DXL tags: #spec #header #1.3-mod", function()
		print("### should parse the Spec Example 9.6. Stream [1.3], file: #9DXL")
		local input = load_file("./yaml-test-suite/data/9DXL/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9DXL/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Document with footer, file: #S4T7 tags: #mapping #footer", function()
		print("### should parse the Document with footer, file: #S4T7")
		local input = load_file("./yaml-test-suite/data/S4T7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/S4T7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.6. Double Quoted Lines, file: #7A4E tags: #spec #scalar #upto-1.2 #whitespace",
		function()
			print("### should parse the Spec Example 7.6. Double Quoted Lines, file: #7A4E")
			local input = load_file("./yaml-test-suite/data/7A4E/in.yaml")
			local tree = load_file("./yaml-test-suite/data/7A4E/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Colon followed by comma, file: #S7BG tags: #scalar", function()
		print("### should parse the Colon followed by comma, file: #S7BG")
		local input = load_file("./yaml-test-suite/data/S7BG/in.yaml")
		local tree = load_file("./yaml-test-suite/data/S7BG/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 5.9. Directive Indicator, file: #27NA tags: #spec #directive #1.3-err", function()
		print("### should parse the Spec Example 5.9. Directive Indicator, file: #27NA")
		local input = load_file("./yaml-test-suite/data/27NA/in.yaml")
		local tree = load_file("./yaml-test-suite/data/27NA/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tags in Block Sequence, file: #2AUY tags: #tag #sequence", function()
		print("### should parse the Tags in Block Sequence, file: #2AUY")
		local input = load_file("./yaml-test-suite/data/2AUY/in.yaml")
		local tree = load_file("./yaml-test-suite/data/2AUY/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.13. In literals, newlines are preserved, file: #6JQW tags: #spec #scalar #literal #comment",
		function()
			print("### should parse the Spec Example 2.13. In literals, newlines are preserved, file: #6JQW")
			local input = load_file("./yaml-test-suite/data/6JQW/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6JQW/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Question mark at start of flow key, file: #652Z tags: #flow", function()
		print("### should parse the Question mark at start of flow key, file: #652Z")
		local input = load_file("./yaml-test-suite/data/652Z/in.yaml")
		local tree = load_file("./yaml-test-suite/data/652Z/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/04/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/04/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tabs in double quoted, file: #3RLN tags: #double #whitespace", function()
		print("### should parse the Leading tabs in double quoted, file: #3RLN")
		local input = load_file("./yaml-test-suite/data/3RLN/05/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3RLN/05/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Double quoted string without closing quote, file: #CQ3W tags: #error #double", function()
		print("### should parse the Double quoted string without closing quote, file: #CQ3W")
		local input = load_file("./yaml-test-suite/data/CQ3W/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Wrong indendation in Map, file: #DMG6 tags: #error #mapping #indent", function()
		print("### should parse the Wrong indendation in Map, file: #DMG6")
		local input = load_file("./yaml-test-suite/data/DMG6/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Doublequoted scalar starting with a tab, file: #CPZ3 tags: #double #scalar", function()
		print("### should parse the Doublequoted scalar starting with a tab, file: #CPZ3")
		local input = load_file("./yaml-test-suite/data/CPZ3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/CPZ3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Invalid document markers in flow style, file: #N782 tags: #flow #edge #header #footer #error",
		function()
			print("### should parse the Invalid document markers in flow style, file: #N782")
			local input = load_file("./yaml-test-suite/data/N782/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Comment without whitespace after doublequoted scalar, file: #SU5Z tags: #comment #error #double #whitespace",
		function()
			print("### should parse the Comment without whitespace after doublequoted scalar, file: #SU5Z")
			local input = load_file("./yaml-test-suite/data/SU5Z/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Flow mapping edge cases, file: #58MP tags: #edge #flow #mapping", function()
		print("### should parse the Flow mapping edge cases, file: #58MP")
		local input = load_file("./yaml-test-suite/data/58MP/in.yaml")
		local tree = load_file("./yaml-test-suite/data/58MP/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.5. Double Quoted Line Breaks [1.3], file: #Q8AD tags: #double #spec #scalar #whitespace #1.3-mod",
		function()
			print("### should parse the Spec Example 7.5. Double Quoted Line Breaks [1.3], file: #Q8AD")
			local input = load_file("./yaml-test-suite/data/Q8AD/in.yaml")
			local tree = load_file("./yaml-test-suite/data/Q8AD/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 6.26. Tag Shorthands, file: #6CK3 tags: #spec #tag #local-tag", function()
		print("### should parse the Spec Example 6.26. Tag Shorthands, file: #6CK3")
		local input = load_file("./yaml-test-suite/data/6CK3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6CK3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Aliases in Flow Objects, file: #X38W tags: #alias #complex-key #flow", function()
		print("### should parse the Aliases in Flow Objects, file: #X38W")
		local input = load_file("./yaml-test-suite/data/X38W/in.yaml")
		local tree = load_file("./yaml-test-suite/data/X38W/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.7. Single Quoted Characters [1.3], file: #SSW6 tags: #spec #scalar #single #1.3-mod",
		function()
			print("### should parse the Spec Example 7.7. Single Quoted Characters [1.3], file: #SSW6")
			local input = load_file("./yaml-test-suite/data/SSW6/in.yaml")
			local tree = load_file("./yaml-test-suite/data/SSW6/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 8.7. Literal Scalar [1.3], file: #T5N4 tags: #spec #literal #scalar #whitespace #1.3-mod",
		function()
			print("### should parse the Spec Example 8.7. Literal Scalar [1.3], file: #T5N4")
			local input = load_file("./yaml-test-suite/data/T5N4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/T5N4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Various combinations of explicit block mappings, file: #KK5P tags: #explicit-key #mapping #sequence",
		function()
			print("### should parse the Various combinations of explicit block mappings, file: #KK5P")
			local input = load_file("./yaml-test-suite/data/KK5P/in.yaml")
			local tree = load_file("./yaml-test-suite/data/KK5P/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Aliases in Implicit Block Mapping, file: #E76Z tags: #mapping #alias", function()
		print("### should parse the Aliases in Implicit Block Mapping, file: #E76Z")
		local input = load_file("./yaml-test-suite/data/E76Z/in.yaml")
		local tree = load_file("./yaml-test-suite/data/E76Z/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.8. Flow Folding, file: #TL85 tags: #double #spec #whitespace #scalar #upto-1.2",
		function()
			print("### should parse the Spec Example 6.8. Flow Folding, file: #TL85")
			local input = load_file("./yaml-test-suite/data/TL85/in.yaml")
			local tree = load_file("./yaml-test-suite/data/TL85/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Single block sequence with anchor and explicit document start, file: #FTA2 tags: #anchor #header #sequence",
		function()
			print("### should parse the Single block sequence with anchor and explicit document start, file: #FTA2")
			local input = load_file("./yaml-test-suite/data/FTA2/in.yaml")
			local tree = load_file("./yaml-test-suite/data/FTA2/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Allowed characters in alias, file: #W5VH tags: #alias #1.3-err", function()
		print("### should parse the Allowed characters in alias, file: #W5VH")
		local input = load_file("./yaml-test-suite/data/W5VH/in.yaml")
		local tree = load_file("./yaml-test-suite/data/W5VH/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Blank lines, file: #H2RW tags: #comment #literal #scalar #whitespace", function()
		print("### should parse the Blank lines, file: #H2RW")
		local input = load_file("./yaml-test-suite/data/H2RW/in.yaml")
		local tree = load_file("./yaml-test-suite/data/H2RW/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multiple Pair Block Mapping, file: #J5UC tags: #mapping", function()
		print("### should parse the Multiple Pair Block Mapping, file: #J5UC")
		local input = load_file("./yaml-test-suite/data/J5UC/in.yaml")
		local tree = load_file("./yaml-test-suite/data/J5UC/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.17. Explicit Block Mapping Entries, file: #5WE3 tags: #explicit-key #spec #mapping #comment #literal #sequence",
		function()
			print("### should parse the Spec Example 8.17. Explicit Block Mapping Entries, file: #5WE3")
			local input = load_file("./yaml-test-suite/data/5WE3/in.yaml")
			local tree = load_file("./yaml-test-suite/data/5WE3/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Anchor plus Alias, file: #SR86 tags: #alias #error", function()
		print("### should parse the Anchor plus Alias, file: #SR86")
		local input = load_file("./yaml-test-suite/data/SR86/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Multiline plain flow mapping key without value, file: #8KB6 tags: #flow #mapping", function()
		print("### should parse the Multiline plain flow mapping key without value, file: #8KB6")
		local input = load_file("./yaml-test-suite/data/8KB6/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8KB6/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.3. Mapping Scalars to Sequences, file: #PBJ2 tags: #spec #mapping #sequence",
		function()
			print("### should parse the Spec Example 2.3. Mapping Scalars to Sequences, file: #PBJ2")
			local input = load_file("./yaml-test-suite/data/PBJ2/in.yaml")
			local tree = load_file("./yaml-test-suite/data/PBJ2/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Various empty or newline only quoted strings, file: #NAT4 tags: #double #scalar #single #whitespace",
		function()
			print("### should parse the Various empty or newline only quoted strings, file: #NAT4")
			local input = load_file("./yaml-test-suite/data/NAT4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/NAT4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 7.13. Flow Sequence, file: #5KJE tags: #spec #flow #sequence", function()
		print("### should parse the Spec Example 7.13. Flow Sequence, file: #5KJE")
		local input = load_file("./yaml-test-suite/data/5KJE/in.yaml")
		local tree = load_file("./yaml-test-suite/data/5KJE/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 7.23. Flow Content, file: #Q88A tags: #spec #flow #sequence #mapping", function()
		print("### should parse the Spec Example 7.23. Flow Content, file: #Q88A")
		local input = load_file("./yaml-test-suite/data/Q88A/in.yaml")
		local tree = load_file("./yaml-test-suite/data/Q88A/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tags for Block Objects, file: #6JWB tags: #mapping #sequence #tag", function()
		print("### should parse the Tags for Block Objects, file: #6JWB")
		local input = load_file("./yaml-test-suite/data/6JWB/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6JWB/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Single Pair Implicit Entries, file: #9MMW tags: #flow #mapping #sequence", function()
		print("### should parse the Single Pair Implicit Entries, file: #9MMW")
		local input = load_file("./yaml-test-suite/data/9MMW/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9MMW/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Sequence on same Line as Mapping Key, file: #5U3A tags: #error #sequence #mapping", function()
		print("### should parse the Sequence on same Line as Mapping Key, file: #5U3A")
		local input = load_file("./yaml-test-suite/data/5U3A/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 7.8. Single Quoted Implicit Keys, file: #87E4 tags: #spec #flow #sequence #mapping",
		function()
			print("### should parse the Spec Example 7.8. Single Quoted Implicit Keys, file: #87E4")
			local input = load_file("./yaml-test-suite/data/87E4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/87E4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 6.11. Multi-Line Comments, file: #P94K tags: #spec #comment", function()
		print("### should parse the Spec Example 6.11. Multi-Line Comments, file: #P94K")
		local input = load_file("./yaml-test-suite/data/P94K/in.yaml")
		local tree = load_file("./yaml-test-suite/data/P94K/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid mapping after sequence, file: #BD7L tags: #error #mapping #sequence", function()
		print("### should parse the Invalid mapping after sequence, file: #BD7L")
		local input = load_file("./yaml-test-suite/data/BD7L/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Bad indentation in mapping (2), file: #U44R tags: #error #mapping #indent #double", function()
		print("### should parse the Bad indentation in mapping (2), file: #U44R")
		local input = load_file("./yaml-test-suite/data/U44R/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Invalid tabs as indendation in a mapping, file: #4EJS tags: #error #mapping #whitespace",
		function()
			print("### should parse the Invalid tabs as indendation in a mapping, file: #4EJS")
			local input = load_file("./yaml-test-suite/data/4EJS/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Node Anchor and Tag on Seperate Lines, file: #BU8L tags: #anchor #indent #1.3-err #tag",
		function()
			print("### should parse the Node Anchor and Tag on Seperate Lines, file: #BU8L")
			local input = load_file("./yaml-test-suite/data/BU8L/in.yaml")
			local tree = load_file("./yaml-test-suite/data/BU8L/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Empty Lines at End of Document, file: #NHX8 tags: #empty-key #whitespace", function()
		print("### should parse the Empty Lines at End of Document, file: #NHX8")
		local input = load_file("./yaml-test-suite/data/NHX8/in.yaml")
		local tree = load_file("./yaml-test-suite/data/NHX8/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.8. Literal Content [1.3], file: #T26H tags: #spec #literal #scalar #comment #whitespace #1.3-mod",
		function()
			print("### should parse the Spec Example 8.8. Literal Content [1.3], file: #T26H")
			local input = load_file("./yaml-test-suite/data/T26H/in.yaml")
			local tree = load_file("./yaml-test-suite/data/T26H/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.20. Tag Handles, file: #CC74 tags: #spec #directive #tag #unknown-tag",
		function()
			print("### should parse the Spec Example 6.20. Tag Handles, file: #CC74")
			local input = load_file("./yaml-test-suite/data/CC74/in.yaml")
			local tree = load_file("./yaml-test-suite/data/CC74/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Trailing spaces after flow collection, file: #4RWC tags: #flow #whitespace", function()
		print("### should parse the Trailing spaces after flow collection, file: #4RWC")
		local input = load_file("./yaml-test-suite/data/4RWC/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4RWC/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Mapping starting at --- line, file: #9KBC tags: #error #header #mapping", function()
		print("### should parse the Mapping starting at --- line, file: #9KBC")
		local input = load_file("./yaml-test-suite/data/9KBC/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 7.10. Plain Characters, file: #DBG4 tags: #spec #flow #sequence #scalar",
		function()
			print("### should parse the Spec Example 7.10. Plain Characters, file: #DBG4")
			local input = load_file("./yaml-test-suite/data/DBG4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/DBG4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Block Mapping with Multiline Scalars, file: #JTV5 tags: #explicit-key #mapping #scalar",
		function()
			print("### should parse the Block Mapping with Multiline Scalars, file: #JTV5")
			local input = load_file("./yaml-test-suite/data/JTV5/in.yaml")
			local tree = load_file("./yaml-test-suite/data/JTV5/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Construct Binary, file: #565N tags: #tag #unknown-tag", function()
		print("### should parse the Construct Binary, file: #565N")
		local input = load_file("./yaml-test-suite/data/565N/in.yaml")
		local tree = load_file("./yaml-test-suite/data/565N/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.22. Block Collection Nodes, file: #57H4 tags: #sequence #mapping #tag",
		function()
			print("### should parse the Spec Example 8.22. Block Collection Nodes, file: #57H4")
			local input = load_file("./yaml-test-suite/data/57H4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/57H4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Various Trailing Comments [1.3], file: #RZP5 tags: #anchor #comment #folded #mapping #1.3-mod",
		function()
			print("### should parse the Various Trailing Comments [1.3], file: #RZP5")
			local input = load_file("./yaml-test-suite/data/RZP5/in.yaml")
			local tree = load_file("./yaml-test-suite/data/RZP5/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 6.12. Separation Spaces, file: #Q9WF tags: #complex-key #flow #spec #comment #whitespace #1.3-err",
		function()
			print("### should parse the Spec Example 6.12. Separation Spaces, file: #Q9WF")
			local input = load_file("./yaml-test-suite/data/Q9WF/in.yaml")
			local tree = load_file("./yaml-test-suite/data/Q9WF/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 6.9. Separated Comment, file: #5NYZ tags: #mapping #spec #comment", function()
		print("### should parse the Spec Example 6.9. Separated Comment, file: #5NYZ")
		local input = load_file("./yaml-test-suite/data/5NYZ/in.yaml")
		local tree = load_file("./yaml-test-suite/data/5NYZ/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Wrong indented flow sequence, file: #9C9N tags: #error #flow #indent #sequence", function()
		print("### should parse the Wrong indented flow sequence, file: #9C9N")
		local input = load_file("./yaml-test-suite/data/9C9N/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 2.4. Sequence of Mappings, file: #229Q tags: #sequence #mapping #spec", function()
		print("### should parse the Spec Example 2.4. Sequence of Mappings, file: #229Q")
		local input = load_file("./yaml-test-suite/data/229Q/in.yaml")
		local tree = load_file("./yaml-test-suite/data/229Q/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Plain dashes in flow sequence, file: #G5U8 tags: #flow #sequence", function()
		print("### should parse the Plain dashes in flow sequence, file: #G5U8")
		local input = load_file("./yaml-test-suite/data/G5U8/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 8.9. Folded Scalar, file: #G992 tags: #spec #folded #scalar #1.3-err", function()
		print("### should parse the Spec Example 8.9. Folded Scalar, file: #G992")
		local input = load_file("./yaml-test-suite/data/G992/in.yaml")
		local tree = load_file("./yaml-test-suite/data/G992/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Question mark edge cases, file: #M2N8 tags: #edge #empty-key", function()
		print("### should parse the Question mark edge cases, file: #M2N8")
		local input = load_file("./yaml-test-suite/data/M2N8/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M2N8/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Question mark edge cases, file: #M2N8 tags: #edge #empty-key", function()
		print("### should parse the Question mark edge cases, file: #M2N8")
		local input = load_file("./yaml-test-suite/data/M2N8/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M2N8/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multiline plain flow mapping key, file: #NJ66 tags: #flow #mapping", function()
		print("### should parse the Multiline plain flow mapping key, file: #NJ66")
		local input = load_file("./yaml-test-suite/data/NJ66/in.yaml")
		local tree = load_file("./yaml-test-suite/data/NJ66/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.7. Literal Scalar, file: #M9B4 tags: #spec #literal #scalar #whitespace #1.3-err",
		function()
			print("### should parse the Spec Example 8.7. Literal Scalar, file: #M9B4")
			local input = load_file("./yaml-test-suite/data/M9B4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/M9B4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 2.28. Log File, file: #RZT7 tags: #spec #header #literal #mapping #sequence",
		function()
			print("### should parse the Spec Example 2.28. Log File, file: #RZT7")
			local input = load_file("./yaml-test-suite/data/RZT7/in.yaml")
			local tree = load_file("./yaml-test-suite/data/RZT7/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Flow collections over many lines, file: #VJP3 tags: #flow #indent", function()
		print("### should parse the Flow collections over many lines, file: #VJP3")
		local input = load_file("./yaml-test-suite/data/VJP3/00/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Flow collections over many lines, file: #VJP3 tags: #flow #indent", function()
		print("### should parse the Flow collections over many lines, file: #VJP3")
		local input = load_file("./yaml-test-suite/data/VJP3/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/VJP3/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the More indented lines at the beginning of folded block scalars, file: #F6MC tags: #folded #indent",
		function()
			print("### should parse the More indented lines at the beginning of folded block scalars, file: #F6MC")
			local input = load_file("./yaml-test-suite/data/F6MC/in.yaml")
			local tree = load_file("./yaml-test-suite/data/F6MC/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Directive variants, file: #ZYU8 tags: #directive", function()
		print("### should parse the Directive variants, file: #ZYU8")
		local input = load_file("./yaml-test-suite/data/ZYU8/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZYU8/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #ZYU8 tags: #directive", function()
		print("### should parse the Directive variants, file: #ZYU8")
		local input = load_file("./yaml-test-suite/data/ZYU8/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZYU8/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #ZYU8 tags: #directive", function()
		print("### should parse the Directive variants, file: #ZYU8")
		local input = load_file("./yaml-test-suite/data/ZYU8/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZYU8/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Directive variants, file: #ZYU8 tags: #directive", function()
		print("### should parse the Directive variants, file: #ZYU8")
		local input = load_file("./yaml-test-suite/data/ZYU8/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/ZYU8/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Tags in Implicit Mapping, file: #74H7 tags: #tag #mapping", function()
		print("### should parse the Tags in Implicit Mapping, file: #74H7")
		local input = load_file("./yaml-test-suite/data/74H7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/74H7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Wrong indented sequence item, file: #ZVH3 tags: #error #sequence #indent", function()
		print("### should parse the Wrong indented sequence item, file: #ZVH3")
		local input = load_file("./yaml-test-suite/data/ZVH3/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Plain Scalar looking like key, comment, anchor and tag, file: #3MYT tags: #scalar", function()
		print("### should parse the Plain Scalar looking like key, comment, anchor and tag, file: #3MYT")
		local input = load_file("./yaml-test-suite/data/3MYT/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3MYT/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.6. Line Folding, file: #K527 tags: #folded #spec #whitespace #scalar #1.3-err",
		function()
			print("### should parse the Spec Example 6.6. Line Folding, file: #K527")
			local input = load_file("./yaml-test-suite/data/K527/in.yaml")
			local tree = load_file("./yaml-test-suite/data/K527/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Allowed characters in keys, file: #2EBW tags: #mapping #scalar", function()
		print("### should parse the Allowed characters in keys, file: #2EBW")
		local input = load_file("./yaml-test-suite/data/2EBW/in.yaml")
		local tree = load_file("./yaml-test-suite/data/2EBW/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Key with anchor after missing explicit mapping value, file: #ZWK4 tags: #anchor #explicit-key #mapping",
		function()
			print("### should parse the Key with anchor after missing explicit mapping value, file: #ZWK4")
			local input = load_file("./yaml-test-suite/data/ZWK4/in.yaml")
			local tree = load_file("./yaml-test-suite/data/ZWK4/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Need document footer before directives, file: #9HCY tags: #directive #error #footer #tag #unknown-tag",
		function()
			print("### should parse the Need document footer before directives, file: #9HCY")
			local input = load_file("./yaml-test-suite/data/9HCY/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Node anchor in sequence, file: #GT5M tags: #anchor #error #sequence", function()
		print("### should parse the Node anchor in sequence, file: #GT5M")
		local input = load_file("./yaml-test-suite/data/GT5M/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Explicit Non-Specific Tag, file: #8MK2 tags: #tag #1.3-err", function()
		print("### should parse the Explicit Non-Specific Tag, file: #8MK2")
		local input = load_file("./yaml-test-suite/data/8MK2/in.yaml")
		local tree = load_file("./yaml-test-suite/data/8MK2/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing line of spaces, file: #L24T tags: #whitespace", function()
		print("### should parse the Trailing line of spaces, file: #L24T")
		local input = load_file("./yaml-test-suite/data/L24T/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/L24T/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing line of spaces, file: #L24T tags: #whitespace", function()
		print("### should parse the Trailing line of spaces, file: #L24T")
		local input = load_file("./yaml-test-suite/data/L24T/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/L24T/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Invalid block mapping key on same line as previous key, file: #62EZ tags: #error #flow #mapping",
		function()
			print("### should parse the Invalid block mapping key on same line as previous key, file: #62EZ")
			local input = load_file("./yaml-test-suite/data/62EZ/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Spec Example 2.17. Quoted Scalars, file: #G4RS tags: #spec #scalar", function()
		print("### should parse the Spec Example 2.17. Quoted Scalars, file: #G4RS")
		local input = load_file("./yaml-test-suite/data/G4RS/in.yaml")
		local tree = load_file("./yaml-test-suite/data/G4RS/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the YAML directive without document end marker, file: #RHX7 tags: #directive #error", function()
		print("### should parse the YAML directive without document end marker, file: #RHX7")
		local input = load_file("./yaml-test-suite/data/RHX7/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Multiline scalar that looks like a YAML directive, file: #XLQ9 tags: #directive #scalar",
		function()
			print("### should parse the Multiline scalar that looks like a YAML directive, file: #XLQ9")
			local input = load_file("./yaml-test-suite/data/XLQ9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/XLQ9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Single Pair Block Mapping, file: #D9TU tags: #simple #mapping", function()
		print("### should parse the Single Pair Block Mapping, file: #D9TU")
		local input = load_file("./yaml-test-suite/data/D9TU/in.yaml")
		local tree = load_file("./yaml-test-suite/data/D9TU/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.24. Global Tags, file: #C4HZ tags: #spec #tag #alias #directive #local-tag",
		function()
			print("### should parse the Spec Example 2.24. Global Tags, file: #C4HZ")
			local input = load_file("./yaml-test-suite/data/C4HZ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/C4HZ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Comment in flow sequence before comma, file: #7TMG tags: #comment #flow #sequence", function()
		print("### should parse the Comment in flow sequence before comma, file: #7TMG")
		local input = load_file("./yaml-test-suite/data/7TMG/in.yaml")
		local tree = load_file("./yaml-test-suite/data/7TMG/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.8. Literal Content, file: #DWX9 tags: #spec #literal #scalar #comment #whitespace #1.3-err",
		function()
			print("### should parse the Spec Example 8.8. Literal Content, file: #DWX9")
			local input = load_file("./yaml-test-suite/data/DWX9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/DWX9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Flow sequence with invalid comma at the beginning, file: #9MAG tags: #error #flow #sequence",
		function()
			print("### should parse the Flow sequence with invalid comma at the beginning, file: #9MAG")
			local input = load_file("./yaml-test-suite/data/9MAG/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 9.5. Directives Documents, file: #W4TN tags: #spec #header #footer #1.3-err",
		function()
			print("### should parse the Spec Example 9.5. Directives Documents, file: #W4TN")
			local input = load_file("./yaml-test-suite/data/W4TN/in.yaml")
			local tree = load_file("./yaml-test-suite/data/W4TN/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Block Mapping with Missing Values, file: #7W2P tags: #explicit-key #mapping", function()
		print("### should parse the Block Mapping with Missing Values, file: #7W2P")
		local input = load_file("./yaml-test-suite/data/7W2P/in.yaml")
		local tree = load_file("./yaml-test-suite/data/7W2P/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 8.16. Block Mappings, file: #TE2A tags: #spec #mapping", function()
		print("### should parse the Spec Example 8.16. Block Mappings, file: #TE2A")
		local input = load_file("./yaml-test-suite/data/TE2A/in.yaml")
		local tree = load_file("./yaml-test-suite/data/TE2A/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Three explicit integers in a block sequence, file: #33X3 tags: #sequence #tag", function()
		print("### should parse the Three explicit integers in a block sequence, file: #33X3")
		local input = load_file("./yaml-test-suite/data/33X3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/33X3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Literal block scalar with more spaces in first line, file: #W9L4 tags: #error #literal #whitespace",
		function()
			print("### should parse the Literal block scalar with more spaces in first line, file: #W9L4")
			local input = load_file("./yaml-test-suite/data/W9L4/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Flow Sequence in Flow Mapping, file: #SBG9 tags: #complex-key #sequence #mapping #flow",
		function()
			print("### should parse the Flow Sequence in Flow Mapping, file: #SBG9")
			local input = load_file("./yaml-test-suite/data/SBG9/in.yaml")
			local tree = load_file("./yaml-test-suite/data/SBG9/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Leading tab content in literals, file: #96NN tags: #indent #literal #whitespace", function()
		print("### should parse the Leading tab content in literals, file: #96NN")
		local input = load_file("./yaml-test-suite/data/96NN/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/96NN/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Leading tab content in literals, file: #96NN tags: #indent #literal #whitespace", function()
		print("### should parse the Leading tab content in literals, file: #96NN")
		local input = load_file("./yaml-test-suite/data/96NN/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/96NN/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid comma in tag, file: #U99R tags: #error #tag", function()
		print("### should parse the Invalid comma in tag, file: #U99R")
		local input = load_file("./yaml-test-suite/data/U99R/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Invalid nested mapping, file: #ZL4Z tags: #error #mapping", function()
		print("### should parse the Invalid nested mapping, file: #ZL4Z")
		local input = load_file("./yaml-test-suite/data/ZL4Z/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Block scalar with more spaces than first content line, file: #S98Z tags: #error #folded #comment #scalar #whitespace",
		function()
			print("### should parse the Block scalar with more spaces than first content line, file: #S98Z")
			local input = load_file("./yaml-test-suite/data/S98Z/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it(
		"should parse the Spec Example 6.18. Primary Tag Handle, file: #9WXW tags: #local-tag #spec #directive #tag #unknown-tag #1.3-err",
		function()
			print("### should parse the Spec Example 6.18. Primary Tag Handle, file: #9WXW")
			local input = load_file("./yaml-test-suite/data/9WXW/in.yaml")
			local tree = load_file("./yaml-test-suite/data/9WXW/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Block Mapping with Missing Keys, file: #2JQS tags: #duplicate-key #mapping #empty-key",
		function()
			print("### should parse the Block Mapping with Missing Keys, file: #2JQS")
			local input = load_file("./yaml-test-suite/data/2JQS/in.yaml")
			local tree = load_file("./yaml-test-suite/data/2JQS/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Inline tabs in double quoted, file: #KH5V tags: #double #whitespace", function()
		print("### should parse the Inline tabs in double quoted, file: #KH5V")
		local input = load_file("./yaml-test-suite/data/KH5V/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/KH5V/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Inline tabs in double quoted, file: #KH5V tags: #double #whitespace", function()
		print("### should parse the Inline tabs in double quoted, file: #KH5V")
		local input = load_file("./yaml-test-suite/data/KH5V/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/KH5V/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Inline tabs in double quoted, file: #KH5V tags: #double #whitespace", function()
		print("### should parse the Inline tabs in double quoted, file: #KH5V")
		local input = load_file("./yaml-test-suite/data/KH5V/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/KH5V/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 7.4. Double Quoted Implicit Keys, file: #LQZ7 tags: #spec #scalar #flow",
		function()
			print("### should parse the Spec Example 7.4. Double Quoted Implicit Keys, file: #LQZ7")
			local input = load_file("./yaml-test-suite/data/LQZ7/in.yaml")
			local tree = load_file("./yaml-test-suite/data/LQZ7/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 7.1. Alias Nodes, file: #3GZX tags: #mapping #spec #alias", function()
		print("### should parse the Spec Example 7.1. Alias Nodes, file: #3GZX")
		local input = load_file("./yaml-test-suite/data/3GZX/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3GZX/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Duplicate YAML directive, file: #SF5V tags: #directive #error", function()
		print("### should parse the Duplicate YAML directive, file: #SF5V")
		local input = load_file("./yaml-test-suite/data/SF5V/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 9.3. Bare Documents, file: #M7A3 tags: #spec #footer #1.3-err", function()
		print("### should parse the Spec Example 9.3. Bare Documents, file: #M7A3")
		local input = load_file("./yaml-test-suite/data/M7A3/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M7A3/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Sequence Indent, file: #RLU9 tags: #sequence #indent", function()
		print("### should parse the Sequence Indent, file: #RLU9")
		local input = load_file("./yaml-test-suite/data/RLU9/in.yaml")
		local tree = load_file("./yaml-test-suite/data/RLU9/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow Sequence in Block Mapping, file: #D88J tags: #flow #sequence #mapping", function()
		print("### should parse the Flow Sequence in Block Mapping, file: #D88J")
		local input = load_file("./yaml-test-suite/data/D88J/in.yaml")
		local tree = load_file("./yaml-test-suite/data/D88J/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Block Mappings in Block Sequence, file: #93JH tags: #mapping #sequence", function()
		print("### should parse the Block Mappings in Block Sequence, file: #93JH")
		local input = load_file("./yaml-test-suite/data/93JH/in.yaml")
		local tree = load_file("./yaml-test-suite/data/93JH/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.24. Verbatim Tags, file: #7FWL tags: #mapping #spec #tag #unknown-tag",
		function()
			print("### should parse the Spec Example 6.24. Verbatim Tags, file: #7FWL")
			local input = load_file("./yaml-test-suite/data/7FWL/in.yaml")
			local tree = load_file("./yaml-test-suite/data/7FWL/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Three dashes and content without space, file: #82AN tags: #scalar #1.3-err", function()
		print("### should parse the Three dashes and content without space, file: #82AN")
		local input = load_file("./yaml-test-suite/data/82AN/in.yaml")
		local tree = load_file("./yaml-test-suite/data/82AN/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid tag, file: #LHL4 tags: #error #tag", function()
		print("### should parse the Invalid tag, file: #LHL4")
		local input = load_file("./yaml-test-suite/data/LHL4/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Node and Mapping Key Anchors, file: #U3XV tags: #anchor #comment #1.3-err", function()
		print("### should parse the Node and Mapping Key Anchors, file: #U3XV")
		local input = load_file("./yaml-test-suite/data/U3XV/in.yaml")
		local tree = load_file("./yaml-test-suite/data/U3XV/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.9. Single Document with Two Comments, file: #J9HZ tags: #mapping #sequence #spec #comment",
		function()
			print("### should parse the Spec Example 2.9. Single Document with Two Comments, file: #J9HZ")
			local input = load_file("./yaml-test-suite/data/J9HZ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/J9HZ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Folded Block Scalar, file: #TS54 tags: #folded #scalar #1.3-err", function()
		print("### should parse the Folded Block Scalar, file: #TS54")
		local input = load_file("./yaml-test-suite/data/TS54/in.yaml")
		local tree = load_file("./yaml-test-suite/data/TS54/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Literal Block Scalar, file: #M29M tags: #literal #scalar #whitespace", function()
		print("### should parse the Literal Block Scalar, file: #M29M")
		local input = load_file("./yaml-test-suite/data/M29M/in.yaml")
		local tree = load_file("./yaml-test-suite/data/M29M/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 6.29. Node Anchors, file: #JS2J tags: #spec #alias", function()
		print("### should parse the Spec Example 6.29. Node Anchors, file: #JS2J")
		local input = load_file("./yaml-test-suite/data/JS2J/in.yaml")
		local tree = load_file("./yaml-test-suite/data/JS2J/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Empty Stream, file: #AVM7 tags: #edge", function()
		print("### should parse the Empty Stream, file: #AVM7")
		local input = load_file("./yaml-test-suite/data/AVM7/in.yaml")
		local tree = load_file("./yaml-test-suite/data/AVM7/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 9.6. Stream, file: #6ZKB tags: #spec #header #1.3-err", function()
		print("### should parse the Spec Example 9.6. Stream, file: #6ZKB")
		local input = load_file("./yaml-test-suite/data/6ZKB/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6ZKB/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 2.10. Node for “Sammy Sosa” appears twice in this document, file: #7BUB tags: #mapping #sequence #spec #alias",
		function()
			print(
				"### should parse the Spec Example 2.10. Node for “Sammy Sosa” appears twice in this document, file: #7BUB"
			)
			local input = load_file("./yaml-test-suite/data/7BUB/in.yaml")
			local tree = load_file("./yaml-test-suite/data/7BUB/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Allowed characters in quoted mapping key, file: #6SLA tags: #mapping #single #double",
		function()
			print("### should parse the Allowed characters in quoted mapping key, file: #6SLA")
			local input = load_file("./yaml-test-suite/data/6SLA/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6SLA/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Block Sequence in Block Sequence, file: #3ALJ tags: #sequence", function()
		print("### should parse the Block Sequence in Block Sequence, file: #3ALJ")
		local input = load_file("./yaml-test-suite/data/3ALJ/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3ALJ/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multi-level Mapping Indent, file: #9FMG tags: #mapping #indent", function()
		print("### should parse the Multi-level Mapping Indent, file: #9FMG")
		local input = load_file("./yaml-test-suite/data/9FMG/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9FMG/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow Mapping Separate Values, file: #4ABK tags: #flow #mapping", function()
		print("### should parse the Flow Mapping Separate Values, file: #4ABK")
		local input = load_file("./yaml-test-suite/data/4ABK/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4ABK/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 7.24. Flow Nodes, file: #LE5A tags: #spec #tag #alias", function()
		print("### should parse the Spec Example 7.24. Flow Nodes, file: #LE5A")
		local input = load_file("./yaml-test-suite/data/LE5A/in.yaml")
		local tree = load_file("./yaml-test-suite/data/LE5A/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Literal modifers, file: #2G84 tags: #literal #scalar", function()
		print("### should parse the Literal modifers, file: #2G84")
		local input = load_file("./yaml-test-suite/data/2G84/00/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Literal modifers, file: #2G84 tags: #literal #scalar", function()
		print("### should parse the Literal modifers, file: #2G84")
		local input = load_file("./yaml-test-suite/data/2G84/01/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Literal modifers, file: #2G84 tags: #literal #scalar", function()
		print("### should parse the Literal modifers, file: #2G84")
		local input = load_file("./yaml-test-suite/data/2G84/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/2G84/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Literal modifers, file: #2G84 tags: #literal #scalar #subject", function()
		print("### should parse the Literal modifers, file: #2G84 #subject")
		local input = load_file("./yaml-test-suite/data/2G84/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/2G84/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Colon and adjacent value on next line, file: #5MUD tags: #double #flow #mapping", function()
		print("### should parse the Colon and adjacent value on next line, file: #5MUD")
		local input = load_file("./yaml-test-suite/data/5MUD/in.yaml")
		local tree = load_file("./yaml-test-suite/data/5MUD/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 5.6. Node Property Indicators, file: #CUP7 tags: #local-tag #spec #tag #alias",
		function()
			print("### should parse the Spec Example 5.6. Node Property Indicators, file: #CUP7")
			local input = load_file("./yaml-test-suite/data/CUP7/in.yaml")
			local tree = load_file("./yaml-test-suite/data/CUP7/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Invalid Mapping in plain scalar, file: #HU3P tags: #error #mapping #scalar", function()
		print("### should parse the Invalid Mapping in plain scalar, file: #HU3P")
		local input = load_file("./yaml-test-suite/data/HU3P/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 9.2. Document Markers, file: #RTP8 tags: #spec #header #footer", function()
		print("### should parse the Spec Example 9.2. Document Markers, file: #RTP8")
		local input = load_file("./yaml-test-suite/data/RTP8/in.yaml")
		local tree = load_file("./yaml-test-suite/data/RTP8/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 8.2. Block Indentation Indicator, file: #R4YG tags: #spec #literal #folded #scalar #whitespace #libyaml-err #upto-1.2",
		function()
			print("### should parse the Spec Example 8.2. Block Indentation Indicator, file: #R4YG")
			local input = load_file("./yaml-test-suite/data/R4YG/in.yaml")
			local tree = load_file("./yaml-test-suite/data/R4YG/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Literal unicode, file: #H3Z8 tags: #scalar", function()
		print("### should parse the Literal unicode, file: #H3Z8")
		local input = load_file("./yaml-test-suite/data/H3Z8/in.yaml")
		local tree = load_file("./yaml-test-suite/data/H3Z8/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Missing comma in flow, file: #CML9 tags: #error #flow #comment", function()
		print("### should parse the Missing comma in flow, file: #CML9")
		local input = load_file("./yaml-test-suite/data/CML9/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Spec Example 6.13. Reserved Directives, file: #6LVF tags: #spec #directive #header #double #1.3-err",
		function()
			print("### should parse the Spec Example 6.13. Reserved Directives, file: #6LVF")
			local input = load_file("./yaml-test-suite/data/6LVF/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6LVF/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 2.27. Invoice, file: #UGM3 tags: #spec #tag #literal #mapping #sequence #alias #unknown-tag",
		function()
			print("### should parse the Spec Example 2.27. Invoice, file: #UGM3")
			local input = load_file("./yaml-test-suite/data/UGM3/in.yaml")
			local tree = load_file("./yaml-test-suite/data/UGM3/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Invalid document-end marker in single quoted string, file: #RXY3 tags: #footer #single #error",
		function()
			print("### should parse the Invalid document-end marker in single quoted string, file: #RXY3")
			local input = load_file("./yaml-test-suite/data/RXY3/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Invalid value after mapping, file: #236B tags: #error #mapping", function()
		print("### should parse the Invalid value after mapping, file: #236B")
		local input = load_file("./yaml-test-suite/data/236B/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Spec Example 2.5. Sequence of Sequences, file: #YD5X tags: #spec #sequence", function()
		print("### should parse the Spec Example 2.5. Sequence of Sequences, file: #YD5X")
		local input = load_file("./yaml-test-suite/data/YD5X/in.yaml")
		local tree = load_file("./yaml-test-suite/data/YD5X/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Aliases in Explicit Block Mapping, file: #6M2F tags: #alias #explicit-key #empty-key",
		function()
			print("### should parse the Aliases in Explicit Block Mapping, file: #6M2F")
			local input = load_file("./yaml-test-suite/data/6M2F/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6M2F/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Colon at the beginning of adjacent flow scalar, file: #5T43 tags: #flow #mapping #scalar",
		function()
			print("### should parse the Colon at the beginning of adjacent flow scalar, file: #5T43")
			local input = load_file("./yaml-test-suite/data/5T43/in.yaml")
			local tree = load_file("./yaml-test-suite/data/5T43/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it(
		"should parse the Spec Example 8.20. Block Node Types, file: #735Y tags: #comment #double #spec #folded #tag",
		function()
			print("### should parse the Spec Example 8.20. Block Node Types, file: #735Y")
			local input = load_file("./yaml-test-suite/data/735Y/in.yaml")
			local tree = load_file("./yaml-test-suite/data/735Y/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Invalid comment after comma, file: #CVW2 tags: #comment #error #flow #sequence", function()
		print("### should parse the Invalid comment after comma, file: #CVW2")
		local input = load_file("./yaml-test-suite/data/CVW2/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Invalid scalar at the end of sequence, file: #6S55 tags: #error #mapping #sequence", function()
		print("### should parse the Invalid scalar at the end of sequence, file: #6S55")
		local input = load_file("./yaml-test-suite/data/6S55/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Zero indented block scalar, file: #FP8R tags: #folded #indent #scalar", function()
		print("### should parse the Zero indented block scalar, file: #FP8R")
		local input = load_file("./yaml-test-suite/data/FP8R/in.yaml")
		local tree = load_file("./yaml-test-suite/data/FP8R/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 6.18. Primary Tag Handle [1.3], file: #6WLZ tags: #local-tag #spec #directive #tag #1.3-mod",
		function()
			print("### should parse the Spec Example 6.18. Primary Tag Handle [1.3], file: #6WLZ")
			local input = load_file("./yaml-test-suite/data/6WLZ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6WLZ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Multiline Scalar at Top Level, file: #9YRD tags: #scalar #whitespace #1.3-err", function()
		print("### should parse the Multiline Scalar at Top Level, file: #9YRD")
		local input = load_file("./yaml-test-suite/data/9YRD/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9YRD/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Invalid document-start marker in doublequoted tring, file: #5TRB tags: #header #double #error",
		function()
			print("### should parse the Invalid document-start marker in doublequoted tring, file: #5TRB")
			local input = load_file("./yaml-test-suite/data/5TRB/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
	it("should parse the Spec Example 6.28. Non-Specific Tags, file: #S4JQ tags: #spec #tag", function()
		print("### should parse the Spec Example 6.28. Non-Specific Tags, file: #S4JQ")
		local input = load_file("./yaml-test-suite/data/S4JQ/in.yaml")
		local tree = load_file("./yaml-test-suite/data/S4JQ/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Escaped slash in double quotes, file: #3UYS tags: #double", function()
		print("### should parse the Escaped slash in double quotes, file: #3UYS")
		local input = load_file("./yaml-test-suite/data/3UYS/in.yaml")
		local tree = load_file("./yaml-test-suite/data/3UYS/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Nested flow collections on one line, file: #F3CP tags: #flow #mapping #sequence", function()
		print("### should parse the Nested flow collections on one line, file: #F3CP")
		local input = load_file("./yaml-test-suite/data/F3CP/in.yaml")
		local tree = load_file("./yaml-test-suite/data/F3CP/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/00/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/00/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/01/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/01/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/02/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/02/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/03/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/03/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/04/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/04/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Trailing tabs in double quoted, file: #DE56 tags: #double #whitespace", function()
		print("### should parse the Trailing tabs in double quoted, file: #DE56")
		local input = load_file("./yaml-test-suite/data/DE56/05/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DE56/05/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Multiline unidented double quoted block key, file: #JKF3 tags: #indent", function()
		print("### should parse the Multiline unidented double quoted block key, file: #JKF3")
		local input = load_file("./yaml-test-suite/data/JKF3/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Plain scalar with backslashes, file: #4V8U tags: #scalar", function()
		print("### should parse the Plain scalar with backslashes, file: #4V8U")
		local input = load_file("./yaml-test-suite/data/4V8U/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4V8U/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid scalar after sequence, file: #TD5N tags: #error #sequence #scalar", function()
		print("### should parse the Invalid scalar after sequence, file: #TD5N")
		local input = load_file("./yaml-test-suite/data/TD5N/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Various location of anchors in flow sequence, file: #CN3R tags: #anchor #flow #mapping #sequence",
		function()
			print("### should parse the Various location of anchors in flow sequence, file: #CN3R")
			local input = load_file("./yaml-test-suite/data/CN3R/in.yaml")
			local tree = load_file("./yaml-test-suite/data/CN3R/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 2.1. Sequence of Scalars, file: #FQ7F tags: #spec #sequence", function()
		print("### should parse the Spec Example 2.1. Sequence of Scalars, file: #FQ7F")
		local input = load_file("./yaml-test-suite/data/FQ7F/in.yaml")
		local tree = load_file("./yaml-test-suite/data/FQ7F/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Two scalar docs with trailing comments, file: #L383 tags: #comment", function()
		print("### should parse the Two scalar docs with trailing comments, file: #L383")
		local input = load_file("./yaml-test-suite/data/L383/in.yaml")
		local tree = load_file("./yaml-test-suite/data/L383/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Block Scalar Strip, file: #MYW6 tags: #literal #scalar #whitespace #1.3-err", function()
		print("### should parse the Block Scalar Strip, file: #MYW6")
		local input = load_file("./yaml-test-suite/data/MYW6/in.yaml")
		local tree = load_file("./yaml-test-suite/data/MYW6/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Invalid escape in double quoted string, file: #55WF tags: #error #double", function()
		print("### should parse the Invalid escape in double quoted string, file: #55WF")
		local input = load_file("./yaml-test-suite/data/55WF/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Multiline single quoted implicit keys, file: #D49Q tags: #error #single #mapping", function()
		print("### should parse the Multiline single quoted implicit keys, file: #D49Q")
		local input = load_file("./yaml-test-suite/data/D49Q/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Anchors With Colon in Name, file: #2SXE tags: #alias #edge #mapping #1.3-err", function()
		print("### should parse the Anchors With Colon in Name, file: #2SXE")
		local input = load_file("./yaml-test-suite/data/2SXE/in.yaml")
		local tree = load_file("./yaml-test-suite/data/2SXE/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Spec Example 5.3. Block Structure Indicators, file: #S9E8 tags: #explicit-key #spec #mapping #sequence",
		function()
			print("### should parse the Spec Example 5.3. Block Structure Indicators, file: #S9E8")
			local input = load_file("./yaml-test-suite/data/S9E8/in.yaml")
			local tree = load_file("./yaml-test-suite/data/S9E8/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Various trailing tabs, file: #DC7X tags: #comment #whitespace", function()
		print("### should parse the Various trailing tabs, file: #DC7X")
		local input = load_file("./yaml-test-suite/data/DC7X/in.yaml")
		local tree = load_file("./yaml-test-suite/data/DC7X/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Anchors on Empty Scalars, file: #PW8X tags: #anchor #explicit-key", function()
		print("### should parse the Anchors on Empty Scalars, file: #PW8X")
		local input = load_file("./yaml-test-suite/data/PW8X/in.yaml")
		local tree = load_file("./yaml-test-suite/data/PW8X/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 2.18. Multi-line Flow Scalars, file: #4CQQ tags: #spec #scalar", function()
		print("### should parse the Spec Example 2.18. Multi-line Flow Scalars, file: #4CQQ")
		local input = load_file("./yaml-test-suite/data/4CQQ/in.yaml")
		local tree = load_file("./yaml-test-suite/data/4CQQ/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 7.15. Flow Mappings, file: #5C5M tags: #spec #flow #mapping", function()
		print("### should parse the Spec Example 7.15. Flow Mappings, file: #5C5M")
		local input = load_file("./yaml-test-suite/data/5C5M/in.yaml")
		local tree = load_file("./yaml-test-suite/data/5C5M/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Spec Example 7.11. Plain Implicit Keys, file: #L9U5 tags: #spec #flow #mapping", function()
		print("### should parse the Spec Example 7.11. Plain Implicit Keys, file: #L9U5")
		local input = load_file("./yaml-test-suite/data/L9U5/in.yaml")
		local tree = load_file("./yaml-test-suite/data/L9U5/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Block Scalar Strip [1.3], file: #753E tags: #literal #scalar #1.3-mod #whitespace", function()
		print("### should parse the Block Scalar Strip [1.3], file: #753E")
		local input = load_file("./yaml-test-suite/data/753E/in.yaml")
		local tree = load_file("./yaml-test-suite/data/753E/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Block Scalar Keep, file: #6FWR tags: #literal #scalar #whitespace", function()
		print("### should parse the Block Scalar Keep, file: #6FWR")
		local input = load_file("./yaml-test-suite/data/6FWR/in.yaml")
		local tree = load_file("./yaml-test-suite/data/6FWR/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Empty flow collections, file: #7ZZ5 tags: #flow #mapping #sequence", function()
		print("### should parse the Empty flow collections, file: #7ZZ5")
		local input = load_file("./yaml-test-suite/data/7ZZ5/in.yaml")
		local tree = load_file("./yaml-test-suite/data/7ZZ5/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it("should parse the Flow sequence without closing bracket, file: #6JTT tags: #error #flow #sequence", function()
		print("### should parse the Flow sequence without closing bracket, file: #6JTT")
		local input = load_file("./yaml-test-suite/data/6JTT/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Invalid item after end of flow sequence, file: #KS4U tags: #error #flow #sequence", function()
		print("### should parse the Invalid item after end of flow sequence, file: #KS4U")
		local input = load_file("./yaml-test-suite/data/KS4U/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it("should parse the Comment that looks like a mapping key, file: #GDY7 tags: #comment #error #mapping", function()
		print("### should parse the Comment that looks like a mapping key, file: #GDY7")
		local input = load_file("./yaml-test-suite/data/GDY7/in.yaml")
		local result = yalua.stream(input)
		assert.Equal(nil, result)
	end)
	it(
		"should parse the Mapping, key and flow sequence item anchors, file: #6BFJ tags: #anchor #complex-key #flow #mapping #sequence",
		function()
			print("### should parse the Mapping, key and flow sequence item anchors, file: #6BFJ")
			local input = load_file("./yaml-test-suite/data/6BFJ/in.yaml")
			local tree = load_file("./yaml-test-suite/data/6BFJ/test.event")
			local result = yalua.stream(input)
			assert.is.Same(tree, remove_all_trailing_spaces(result))
		end
	)
	it("should parse the Spec Example 5.8. Quoted Scalar Indicators, file: #9SHH tags: #spec #scalar", function()
		print("### should parse the Spec Example 5.8. Quoted Scalar Indicators, file: #9SHH")
		local input = load_file("./yaml-test-suite/data/9SHH/in.yaml")
		local tree = load_file("./yaml-test-suite/data/9SHH/test.event")
		local result = yalua.stream(input)
		assert.is.Same(tree, remove_all_trailing_spaces(result))
	end)
	it(
		"should parse the Block scalar with wrong indented line after spaces only, file: #5LLU tags: #error #folded #whitespace",
		function()
			print("### should parse the Block scalar with wrong indented line after spaces only, file: #5LLU")
			local input = load_file("./yaml-test-suite/data/5LLU/in.yaml")
			local result = yalua.stream(input)
			assert.Equal(nil, result)
		end
	)
end)
